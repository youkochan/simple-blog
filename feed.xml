<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Simple Blog</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://blog.qingye.me/feed.xml" />
<link rel="alternate" type="text/html" href="http://blog.qingye.me" />
<updated>2016-04-01T20:46:37+08:00</updated>
<id>http://blog.qingye.me/</id>
<author>
  <name>Qing YE</name>
  <uri>http://blog.qingye.me/</uri>
  <email>youkochan233@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[leetcode-note-7]]></title>
 <link rel="alternate" type="text/html" href="http://blog.qingye.me/leetcode-note-7/" />
  <id>http://blog.qingye.me/leetcode-note-7</id>
  <published>2016-04-01T19:58:51+08:00</published>
  <updated>2016-04-01T19:58:51+08:00</updated>
  <author>
    <name>Qing YE</name>
    <uri>http://blog.qingye.me</uri>
    <email>youkochan233@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;这几天做得一些比较有意思的题目&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;trapping-rain-water&quot;&gt;Trapping Rain Water&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.&lt;br /&gt;
For example,&lt;br /&gt;
Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;figure&gt;
    &lt;a href=&quot;/images/blog/leetcode-note-7-1.png&quot;&gt;
        &lt;img src=&quot;/images/blog/leetcode-note-7-1.png&quot; alt=&quot;&quot; /&gt;
    &lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;解题思路：&lt;/p&gt;

&lt;p&gt;有一种简单的思路如下，蓝色格子的个数等于数组长度n乘以数组中最大高度，再减去黑色格子个数和白色格子个数，而白色格子个数就等于由两边往中间数，遇到黑色格子就停止。&lt;/p&gt;

&lt;p&gt;由此可以写出代码如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;max_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sum_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;        
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// count the white blocks from left&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// count the white blocks from right&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;reverse-nodes-in-k-group&quot;&gt;Reverse Nodes in k-Group&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;Given a linked list, reverse the nodes of a linked list k at a time&lt;br /&gt;
and return its modified list.&lt;br /&gt;
If the number of nodes is not a multiple of k then left-out nodes&lt;br /&gt;
in the end should remain as it is.&lt;br /&gt;
You may not alter the values in the nodes, only nodes itself may be changed.&lt;br /&gt;
Only constant memory is allowed.&lt;br /&gt;
For example,&lt;br /&gt;
Given this linked list: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5&lt;br /&gt;
For k = 2, you should return: 2-&amp;gt;1-&amp;gt;4-&amp;gt;3-&amp;gt;5&lt;br /&gt;
For k = 3, you should return: 3-&amp;gt;2-&amp;gt;1-&amp;gt;4-&amp;gt;5&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;思路比较直接：判断当前需要转置的链表长度是否小于k，如果小于，不需要转置，直接返回；若大于，转置前k，然后递归调用自身来转置后面的链表。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Definition for singly-linked list.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * struct ListNode {&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *     int val;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *     ListNode *next;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *     ListNode(int x) : val(x), next(NULL) {}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * };&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverseKGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// check the length of the list&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// if less than k, do nothing&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// reverse the list&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;new_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;new_tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;new_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// reverse the remain list, and add its newhead in the tail.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_step_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverseKGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new_tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_step_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;first-missing-positive&quot;&gt;First Missing Positive&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;Given an unsorted integer array, find the first missing positive integer.&lt;br /&gt;
For example,&lt;br /&gt;
Given [1,2,0] return 3,&lt;br /&gt;
and [3,4,-1,1] return 2.&lt;br /&gt;
Your algorithm should run in O(n) time and uses constant space.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;寻找一个未排序的数组中的未出现的最小正整数。如果排序，时间复杂度肯定就超过了O(n) 。可以考虑交换数字的方式，当当前数字不在正确位置时，一直把当前位置的数字交换到正确的位置，直到不满足某一些条件。最后用一个循环寻找第一个与所在位置不对应的数字，即所求。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstMissingPositive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;regular-expression-matching&quot;&gt;Regular Expression Matching&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;Implement regular expression matching with support for ‘.’ and ‘&lt;em&gt;’.&lt;br /&gt;
‘.’ Matches any single character.&lt;br /&gt;
‘&lt;/em&gt;’ Matches zero or more of the preceding element.&lt;br /&gt;
The matching should cover the entire input string (not partial).&lt;br /&gt;
The function prototype should be:&lt;br /&gt;
bool isMatch(const char &lt;em&gt;s, const char *p)&lt;br /&gt;
Some examples:&lt;br /&gt;
isMatch(“aa”,”a”) → false&lt;br /&gt;
isMatch(“aa”,”aa”) → true&lt;br /&gt;
isMatch(“aaa”,”aa”) → false&lt;br /&gt;
isMatch(“aa”, “a&lt;/em&gt;”) → true&lt;br /&gt;
isMatch(“aa”, “.&lt;em&gt;”) → true&lt;br /&gt;
isMatch(“ab”, “.&lt;/em&gt;”) → true&lt;br /&gt;
isMatch(“aab”, “c&lt;em&gt;a&lt;/em&gt;b”) → true&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;考虑从后往前匹配，匹配成功的标志即s的下标到了-1且p的下标也到了-1。同时由于’.’以及’*‘的存在，因此在匹配的过程中需要考虑多重情况。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// s:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// p: c*c*c*&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pidx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sidx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pidx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sidx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pidx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// s: abccd&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// p: abc*d&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pidx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pidx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sidx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pidx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isMatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


    &lt;p&gt;&lt;a href=&quot;http://blog.qingye.me/leetcode-note-7/&quot;&gt;leetcode-note-7&lt;/a&gt; was originally published by Qing YE at &lt;a href=&quot;http://blog.qingye.me&quot;&gt;Simple Blog&lt;/a&gt; on April 01, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[DHT网络磁力链接爬虫以及搜索网站搭建]]></title>
 <link rel="alternate" type="text/html" href="http://blog.qingye.me/DHTSpider/" />
  <id>http://blog.qingye.me/DHTSpider</id>
  <published>2016-01-25T22:58:24+08:00</published>
  <updated>2016-01-25T22:58:24+08:00</updated>
  <author>
    <name>Qing YE</name>
    <uri>http://blog.qingye.me</uri>
    <email>youkochan233@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;回家再写。先开坑。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;section&quot;&gt;背景介绍&lt;/h2&gt;

&lt;p&gt;DHT 网络是一种去中心化的 P2P 网络，DHT 爬虫的目的是爬取 DHT 网络种的各种资源信息，整理得出一系列 P2P 资源信息，从而可以加以利用。根据得到的多种多样的资源信息，可以建立一个搜索引擎，从而可以对 P2P 网络中的资源进行有针对性的快速检索。本文介绍了 DHT 网络爬虫的相关基本概念以及需要解决的问题以及解决方案。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;相关概念&lt;/h2&gt;

&lt;h3 id=&quot;dhtmagnettorrent&quot;&gt;DHT/Magnet/Torrent&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Torrent&lt;/code&gt; 文件即种子文件，保存了 P2P 网络中下载某个资源需要的一些特定信息，比如 &lt;code&gt;tracker&lt;/code&gt; 地址，以及该资源的一些特定信息，比如文件结构、各部分的校验和等等。我们可以通过一个 &lt;code&gt;torrent&lt;/code&gt; 文件从 P2P 网络中下载特定资源。&lt;/p&gt;

&lt;p&gt;当我们使用一个种子文件 &lt;code&gt;.torrent&lt;/code&gt; 在 P2P 网络中下载某一个资源时，我们需要知道 P2P 网络中有哪些客户端有这个资源，这样我们才可以向这些客户端发出下载资源的请求。我们把这些提供特定资源的客户端（或者服务器）叫做 &lt;code&gt;peer&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;传统的 P2P 网络中，存在一个 &lt;code&gt;tracker&lt;/code&gt; 服务器，这些服务器跟踪记录了某一些特定资源的 &lt;code&gt;peer&lt;/code&gt; 列表。因此我们在下载某一个特定资源时，仅仅需要向 &lt;code&gt;tracker&lt;/code&gt; 服务器查询这个特定资源的 &lt;code&gt;peer&lt;/code&gt; 列表即可。后来由于种种原因， &lt;code&gt;tracker&lt;/code&gt; 服务器常常会面临一些法律问题。而为了解决 &lt;code&gt;tracker&lt;/code&gt; 服务器不可用时的资源下载问题，应运而生的即 &lt;code&gt;DHT&lt;/code&gt; 分布式哈希表协议。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DHT&lt;/code&gt; 的出现用于解决当 &lt;code&gt;tracker&lt;/code&gt; 服务器不可用时，P2P 客户端依然可以取得某个资源的 &lt;code&gt;peer&lt;/code&gt;。&lt;code&gt;DHT&lt;/code&gt; 解决这个问题，是因为它将原来 &lt;code&gt;tracker&lt;/code&gt; 上的资源 &lt;code&gt;peer&lt;/code&gt; 信息分散到了整个网络中。这里将实现了 &lt;code&gt;DHT&lt;/code&gt; 协议的计算机定义为 &lt;code&gt;node&lt;/code&gt;。通常一个 P2P 客户端程序既是 &lt;code&gt;peer&lt;/code&gt; 也是 &lt;code&gt;node&lt;/code&gt;。 DHT 网络有多种实现算法，例如 &lt;code&gt;Kademlia&lt;/code&gt;。由此可知，一个 P2P 网络中的节点包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;peer&lt;/code&gt; 是在一个 &lt;code&gt;TCP&lt;/code&gt; 端口上监听的客户端/服务器，它实现了 &lt;code&gt;BitTorrent&lt;/code&gt; 协议。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;node&lt;/code&gt; 是在一个 &lt;code&gt;UDP&lt;/code&gt; 端口上监听的客户端/服务器，它实现了 &lt;code&gt;DHT&lt;/code&gt; (分布式哈希表) 协议。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当某个 P2P 客户端通过种子文件下载资源时，如果没有 &lt;code&gt;tracker&lt;/code&gt; 服务器（该信息保存在种子文件中），它就会向 DHT 网络查询这个资源对应的 &lt;code&gt;peer&lt;/code&gt; 列表。资源的标识在 DHT 网络中称为 &lt;code&gt;infohash&lt;/code&gt; ，是一个 20 字节长的字符串，一般通过 &lt;code&gt;sha1&lt;/code&gt; 算法获得。&lt;/p&gt;

&lt;p&gt;实际上，种子文件本身就对应着一个 &lt;code&gt;infohash&lt;/code&gt;，这个 &lt;code&gt;infohash&lt;/code&gt; 是通过种子文件的文件描述信息动态计算得到。一个种子文件包含了对应资源的描述信息，例如文件名、文件大小等。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Magnet&lt;/code&gt;，这里指的是磁力链接，它是一个类似 URL 的字符串地址。P2P 软件通过磁力链接，会下载到一个种子文件，然后根据该种子文件继续真实资源的下载。其实 &lt;code&gt;Magnet&lt;/code&gt; 中包含的字符串即为其对应资源的 &lt;code&gt;infohash&lt;/code&gt;，比如下面这个磁力链接地址：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;magnet:?xt=urn:btih:95AAFCAA885AFF46CDDB8944C538383B37D4650F
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;磁力链接中包含的最重要的信息就是 &lt;code&gt;btih&lt;/code&gt;。这个 &lt;code&gt;btih&lt;/code&gt; 一般为40字节或32字节，它其实只是资源 &lt;code&gt;infohash&lt;/code&gt; （20字节）的一种编码形式，即 bittorrent info hash 的缩写。&lt;/p&gt;

&lt;h3 id=&quot;kademlia&quot;&gt;Kademlia&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Kademlia&lt;/code&gt; 是 DHT 网络的一种实现。可以参考「资料6」以及「资料7」。&lt;/p&gt;

&lt;p&gt;每个 &lt;code&gt;node&lt;/code&gt; 有一个全局唯一的标识符，作为 &lt;code&gt;node ID&lt;/code&gt;。&lt;code&gt;node ID&lt;/code&gt; 是一个随机选择的 160bit 空间，BitTorrent 协议中的 &lt;code&gt;infohash&lt;/code&gt; 也使用这样的 160bit 空间。 &lt;code&gt;距离&lt;/code&gt; 用来衡量两个 &lt;code&gt;node&lt;/code&gt; 之间或者 &lt;code&gt;node&lt;/code&gt; 和 &lt;code&gt;infohash&lt;/code&gt; 之间的「远近」。&lt;code&gt;node&lt;/code&gt; 必须维护一个路由表，路由表中含有一部分其它节点的联系信息。其它节点距离自己越近时，路由表信息越详细。因此每个节点都知道 DHT 中离自己很”近”的节点的联系信息，而离自己非常远的 ID 的联系信息却知道的很少。&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;Kademlia&lt;/code&gt; 网络中，距离是通过异或（XOR）计算的，结果为无符号整数。 &lt;code&gt;distance(A, B) = |A xor B|&lt;/code&gt; ，值越小表示越近。&lt;/p&gt;

&lt;p&gt;当某个节点要为 &lt;code&gt;torrent&lt;/code&gt; 寻找 &lt;code&gt;peer&lt;/code&gt; 时，它将自己路由表中的 &lt;code&gt;node ID&lt;/code&gt; 和 &lt;code&gt;torrent&lt;/code&gt; 的 &lt;code&gt;infohash&lt;/code&gt; 进行 “距离对比”。然后向路由表中离 &lt;code&gt;infohash&lt;/code&gt; 最近的 &lt;code&gt;node&lt;/code&gt; 发送请求，问它们正在下载这个 &lt;code&gt;torrent&lt;/code&gt; 的 &lt;code&gt;peer&lt;/code&gt; 的联系信息。如果一个被联系的节点知道下载这个 &lt;code&gt;torrent&lt;/code&gt; 的 &lt;code&gt;peer&lt;/code&gt; 信息，那个 &lt;code&gt;peer&lt;/code&gt; 的联系信息将被回复给当前 节点。否则，那个被联系的节点则必须回复在它的路由表中离该 &lt;code&gt;torrent&lt;/code&gt; 的 &lt;code&gt;infohash&lt;/code&gt; 最近的节点的联系信息。最初的节点重复地请求比目标 &lt;code&gt;infohash&lt;/code&gt; 更近的节点，直到不能再找到更近的节点为止。查询完了之后，客户端把自己作为一个 &lt;code&gt;peer&lt;/code&gt; 插入到所有回复节点中离种子最近的那个节点中。&lt;/p&gt;

&lt;p&gt;请求 &lt;code&gt;peer&lt;/code&gt; 的返回值包含一个不透明的值，称之为 “令牌(token)”。如果一个节点宣布它所控制的 &lt;code&gt;peer&lt;/code&gt; 正在下载一个种子，它必须在回复请求节点的同时，附加上对方向我们发送的最近的 “令牌(token)”。这样当一个节点试图 “宣布” 正在下载一个种子时，被请求的节点核对令牌和发出请求的节点的 IP 地址。这是为了防止恶意的主机登记其它主机的种子。由于令牌仅仅由请求节点返回给收到令牌的同一个节点，所以没有规定他的具体实现。但是令牌必须在一个规定的时间内被接受，超时后令牌则失效。在 BitTorrent 的实现中，token 是在 IP 地址后面连接一个 secret，这个 secret 每五分钟改变一次，其中 token 在十分钟以内是可接受的。&lt;/p&gt;

&lt;p&gt;有了这个路由表之后，再通过一个基于距离关系的查找算法（K桶），就可以实现不用挨个遍历就找到特定的节点。而查找资源peer这个操作，正是基于节点查找这个过程。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;协议&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Kademlia&lt;/code&gt; 定义了节点之间的交互协议。这些协议支撑了整个 DHT 网络里信息分布式存储的实现。这些协议都是使用UDP来传送。其协议格式使用一种称为 &lt;code&gt;bencode&lt;/code&gt; 的编码方式来编码协议数据。&lt;code&gt;bencode&lt;/code&gt; 是一种文本格式的编码，它还用于种子文件内的信息编码。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Kademlia&lt;/code&gt; 协议具体格式可参考 BitTorrent的定义。这些协议包括4种请求： &lt;code&gt;ping&lt;/code&gt; ，&lt;code&gt;find_node&lt;/code&gt; ，&lt;code&gt;get_peer&lt;/code&gt; ，&lt;code&gt;announce_peer&lt;/code&gt; 。在有些文档中这些请求的名字会有不同，例如 &lt;code&gt;announce_peer&lt;/code&gt; 又被称为 &lt;code&gt;store&lt;/code&gt; ，&lt;code&gt;get_peer&lt;/code&gt; 被称为 &lt;code&gt;find_value&lt;/code&gt; 。这4种请求中，都会有对应的回应消息。其中最重要的消息是 &lt;code&gt;get_peer&lt;/code&gt; ，其目的在于在网络中查找某个资源对应的 &lt;code&gt;peer&lt;/code&gt; 列表。&lt;/p&gt;

&lt;p&gt;值得一提的是，所有这些请求，包括各种回应，都可以用于处理该消息的节点构建路由表。因为路由表本质就是存储网络中的节点信息。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;ping&lt;/code&gt;：用于确定某个节点是否在线。这个请求主要用于辅助路由表的更新。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;find_node&lt;/code&gt;：用于查找某个节点，以获得其地址信息。当某个节点接收到该请求后，如果目标节点不在自己的路由表里，那么就返回离目标节点较近的 K 个节点。这个消息可用于节点启动时构建路由表。通过 &lt;code&gt;find_node&lt;/code&gt; 方式构建路由表，其实现方式为向 DHT  网络查询自己。那么，接收该查询的节点就会一直返回其他节点了列表，查询者递归查询，直到无法查询为止。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;get_peer&lt;/code&gt;：通过资源的 &lt;code&gt;infohash&lt;/code&gt; 获得资源对应的 &lt;code&gt;peer&lt;/code&gt; 列表。当查询者获得资源的 &lt;code&gt;peer&lt;/code&gt; 列表后，它就可以通过这些 &lt;code&gt;peer&lt;/code&gt; 进行资源下载了。收到该请求的节点会在自己的路由表中查找该 &lt;code&gt;infohash&lt;/code&gt;，如果有收录，就返回对应的 &lt;code&gt;peer&lt;/code&gt; 列表。如果没有，则返回离该 &lt;code&gt;infohash&lt;/code&gt; 较近的若干个节点。查询者若收到的是节点列表，那么就会递归查找。这个过程同 &lt;code&gt;find_node&lt;/code&gt; 一样。值得注意的是，&lt;code&gt;get_peer&lt;/code&gt; 的回应消息里会携带一个 &lt;code&gt;token&lt;/code&gt;，该 &lt;code&gt;token&lt;/code&gt;会用于稍后的announce_peer请求。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;announce_peer&lt;/code&gt;：该请求主要目的在于通知，通知其他节点自己开始下载某个资源。这个消息用于构建网络中资源的 &lt;code&gt;peer&lt;/code&gt; 列表。当一个已经加入 DHT 网络的 P2P 客户端通过种子文件开始下载资源时，首先在网络中查询该资源的 &lt;code&gt;peer&lt;/code&gt; 列表，这个过程通过 &lt;code&gt;get_peer&lt;/code&gt; 完成。当某个节点从 &lt;code&gt;get_peer&lt;/code&gt; 返回 &lt;code&gt;peer&lt;/code&gt; 时，查询者开始下载，然后通过 &lt;code&gt;announce_peer&lt;/code&gt; 告诉返回这个 &lt;code&gt;peer&lt;/code&gt; 的节点。&lt;code&gt;announce_peer&lt;/code&gt; 中会携带 &lt;code&gt;get_peer&lt;/code&gt; 回应消息里的 &lt;code&gt;token&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-3&quot;&gt;爬虫部分&lt;/h2&gt;

&lt;p&gt;DHT 爬虫即伪装成一个 DHT 网络节点，主要功能有以下几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;通过收发 DHT 网络中其他节点发来的的 &lt;code&gt;geet_peer&lt;/code&gt; 或者 &lt;code&gt;announce_peer&lt;/code&gt; 消息中的 &lt;code&gt;infohash&lt;/code&gt; 确认 DHT 网络中存在某一个资源（不一定能被下载）或存在某一个资源可以被下载。&lt;/li&gt;
  &lt;li&gt;通过从网络中获取这个资源（&lt;code&gt;infohash&lt;/code&gt;）的种子文件，来获得该资源的描述&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当爬虫程序加入 DHT 网络后，它总会收到其他节点发来的announce_peer消息。announce_peer消息与get_peer消息里都带了资源的infohash，但是get_peer里的infohash对应的资源在该网络中不一定存在，即该资源没有任何可用peer。而announce_peer则表示已经确认了该网络中有节点正在下载该资源，也即该资源的数据确实存在该网络中。&lt;/p&gt;

&lt;p&gt;所以，爬虫程序需要尽最大努力地获取其他节点发来的announce_peer消息。如果announce_peer消息会发送给离消息发送节点较近的节点，那么，一方面，爬虫程序应该将自己告诉网络中尽可能多的节点。这可以通过一次完整的find_node操作实现。另一方面，爬虫程序内部实现可以部署多个DHT节点，总之目的在于尽可能地让爬虫程序称为其他节点的较近者。&lt;/p&gt;

&lt;p&gt;通过累计收集得到的资源信息，就可以提供一个资源搜索引擎，或者构建资源统计信息。以下进一步描述实现细节。整个爬虫的实现依赖了一个很重要的信息，那就是资源的 &lt;code&gt;infohash&lt;/code&gt; 实际上就是一个磁力链接（当然需要包装一下数据）。这意味着一旦我们获得了一个 &lt;code&gt;infohash&lt;/code&gt;，我们就等于获得了一个种子。&lt;/p&gt;

&lt;p&gt;其中，通过 &lt;code&gt;infohash&lt;/code&gt; 获得种子文件的过程可以采用以下几种方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;利用BT的官方协议获取：即向 DHT 网络请求这个 &lt;code&gt;infohash&lt;/code&gt; 从而得到种子文件。优点：得到的信息准确无误，稳定。缺点：慢，有时候还不一定会有结果，因为有一些节点不一定会在线。&lt;/li&gt;
  &lt;li&gt;从迅雷的种子库获取：迅雷一般会把种子信息做一个缓存，这样一般进行请求马上就会有回复。&lt;/li&gt;
  &lt;li&gt;从比特彗星的种子库获取：同上，但是比迅雷信息丰富一些。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后呢，为了写爬虫更加作死一些，选择了第一种方式。&lt;/p&gt;

&lt;p&gt;目前爬虫模块的主要构思是&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;MagnetSpider&lt;/code&gt; 主要用于伪装 DHT 节点，获取 &lt;code&gt;magnet&lt;/code&gt;，并做好保存。同时根据 &lt;code&gt;magnet&lt;/code&gt; 的获取来源，将 &lt;code&gt;magnet&lt;/code&gt; 赋予不同的优先级加入优先级队列 &lt;code&gt;work_queue&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;TorrentSpider&lt;/code&gt; 主要用于循环从 &lt;code&gt;work_queue&lt;/code&gt; 中获取 &lt;code&gt;magnet&lt;/code&gt; 解析任务，解析并保存 &lt;code&gt;torrent&lt;/code&gt; 文件以及种子信息（暂时可以使用资源名）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;MainSpider&lt;/code&gt; 主函数，主要完成初始化操作以及各种其他操作&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-4&quot;&gt;检索部分&lt;/h2&gt;

&lt;p&gt;检索采用 ElasticSearch 作为检索引擎，待解决的问题有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ES 的访问权限控制问题：可以通过设置 ES 的配置文件，从而保证只有本机可以访问 ES 保证了数据的安全性。&lt;/li&gt;
  &lt;li&gt;ES 的数据导入问题：可以将 ES 的数据导入操作直接写到 &lt;code&gt;TorrentSpider&lt;/code&gt; 中，当 &lt;code&gt;TorrentSpider&lt;/code&gt; 采集到种子信息时直接写入&lt;/li&gt;
  &lt;li&gt;ES 的数据备份问题&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当我收集了 404353 条记录，开开心心准备去写入的时候发现了一个问题：内存不足。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x00000000f8090000, 26771456, 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; failed&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Cannot allocate memory&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;errno&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# &lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# There is insufficient memory for the Java Runtime Environment to continue.&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# Native memory allocation (malloc) failed to allocate 26771456 bytes for committing reserved memory.&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# An error report file with more information is saved as:&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# /home/yeqing/elasticsearch-2.1.0/bin/hs_err_pid20445.log&lt;/span&gt;
	yeqing@myVPS:~/elasticsearch-2.1.0/bin&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;折腾了一下发现是 &lt;code&gt;cached&lt;/code&gt; 缓存占了太多的空间：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;yeqing@myVPS:~/elasticsearch-2.1.0/bin&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;free
	             total       used       free     shared    buffers     cached
	Mem:        &lt;span class=&quot;m&quot;&gt;501800&lt;/span&gt;     &lt;span class=&quot;m&quot;&gt;490120&lt;/span&gt;      &lt;span class=&quot;m&quot;&gt;11680&lt;/span&gt;        &lt;span class=&quot;m&quot;&gt;616&lt;/span&gt;       &lt;span class=&quot;m&quot;&gt;2484&lt;/span&gt;     365720
	-/+ buffers/cache:     &lt;span class=&quot;m&quot;&gt;121916&lt;/span&gt;     379884
	Swap:            &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;          &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;          0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;而使用 bulk 方式提交数据总会出现这个问题。参考 &lt;a href=&quot;http://www.linuxatemyram.com&quot;&gt;http://www.linuxatemyram.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;然后改成了将整理好的记录分成小文件的形式，以 1000 条记录为单位。&lt;/p&gt;

&lt;p&gt;后来再折腾了一下发现 ES 总是无缘无故被 kill 掉。一开始以为是占用内存的问题，设置了 &lt;code&gt;ES_HEAP_SIZE&lt;/code&gt; 以及 &lt;code&gt;ES_DIRECT_MEMORY&lt;/code&gt; 后还是无故被 kill。后来更改了 linux 的用户最大打开文件数后一直工作正常，无崩溃现象发生。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;网站架构部分&lt;/h2&gt;

&lt;p&gt;拟采用 Python Flask 或者 Django 框架来进行网站搭建。网站架构部分通过使用 Django ，都还是比较简单。有一些需要解决的问题如下。&lt;/p&gt;

&lt;p&gt;编写 Django 模板的时候有一个问题，模板编写过程中的变量名不能以下划线开头。然而 ES 查询的结果中包含一些关键字段比如 &lt;code&gt;_source&lt;/code&gt; &lt;code&gt;_id&lt;/code&gt; &lt;code&gt;_type&lt;/code&gt; 等字段不能使用 &lt;code&gt;result._source&lt;/code&gt; 这种方式调用，因此需要使用过滤器的方式从变量中提取出需要的字段。&lt;/p&gt;

&lt;p&gt;首先在项目目录下新建一个 &lt;code&gt;templatetags&lt;/code&gt; 目录，然后新建一个 &lt;code&gt;__init__.py&lt;/code&gt; 空文件即可。再新建一个 &lt;code&gt;py&lt;/code&gt; 文件，用于定义自己的过滤器。下面即一个最简单的过滤器，保存为 &lt;code&gt;fliter.py&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hits_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;_source&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hits_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后在模板中使用 &lt;code&gt;\{\% load fliter \%\}&lt;/code&gt; 导入自定义模板即可。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;前端展示部分&lt;/h2&gt;

&lt;p&gt;拟采用 Bootstrap 进行快速开发。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://codemacro.com/2013/05/19/crawl-dht/&quot;&gt;P2P中DHT网络爬虫&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://maijunjin.github.io/bt/2013/10/12/磁力链接转换为bt种子方法.html&quot;&gt;磁力链接转换为BT种子方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.defcon.org/images/defcon-18/dc-18-presentations/Wolchok/DEFCON-18-Wolchok-Crawling-Bittorrent-DHTS.pdf&quot;&gt;Crawling Bittorrent DHT&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://justjavac.com/other/2015/02/01/bittorrent-dht-protocol.html&quot;&gt;DHT Protocol：BitTorrent DHT 协议中文翻译&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://justjavac.com/other/2015/02/01/magnet-and-torrent-search-engine-architecture-based-on-dht.html&quot;&gt;基于 DHT 网络的磁力链接和BT种子的搜索引擎架构&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bittorrent.org/beps/bep_0005.html&quot;&gt;BitTorrent网站上的DHT协议描述&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/mergerly/article/details/7989281&quot;&gt;P2P中DHT网络介绍&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bencode&quot;&gt;Bencode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/xxxxxx91116/article/details/7971134&quot;&gt;【P2P网络】磁力链接转换为种子文件 magnet to torrent&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


    &lt;p&gt;&lt;a href=&quot;http://blog.qingye.me/DHTSpider/&quot;&gt;DHT网络磁力链接爬虫以及搜索网站搭建&lt;/a&gt; was originally published by Qing YE at &lt;a href=&quot;http://blog.qingye.me&quot;&gt;Simple Blog&lt;/a&gt; on January 25, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[编写一个E绅士扒图器]]></title>
 <link rel="alternate" type="text/html" href="http://blog.qingye.me/write-a-ehentai-ghost/" />
  <id>http://blog.qingye.me/write-a-ehentai-ghost</id>
  <published>2016-01-15T22:38:31+08:00</published>
  <updated>2016-01-15T22:38:31+08:00</updated>
  <author>
    <name>Qing YE</name>
    <uri>http://blog.qingye.me</uri>
    <email>youkochan233@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;正式开坑！考完近世代数就开工！！！！（已完成）&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;section&quot;&gt;背景介绍&lt;/h2&gt;

&lt;p&gt;E绅士是一个很久之前就已经知晓了的神站，然而由于种种原因，其实并没有对其进行深入了解。
最近看了一下之后有一种发现了新世界的感觉，之前在很多地方难以搜寻到的 &lt;strong&gt;资源&lt;/strong&gt; 在这里都可以很方便地找到。唯一缺点就是打包下载需要积分。因此就想自己实现一个扒图器。&lt;/p&gt;

&lt;p&gt;作为一个提供图片的网站，自然反爬是很重要的。每一个图集的链接如下：&lt;/p&gt;

&lt;p&gt;http://xxxxxxxxxxx/g/894218/14146a3ae7/&lt;/p&gt;

&lt;p&gt;简单观察了一下发现每一个图集的链接除了 GID（894218）以外还有一个 Token 字符串（14146a3ae7），由于不知道这个串是如何生成的（也有可能就是随机变动防爬？），因此，提供URL的时候需要提供完整URL而不只是 GID。不过 GID 应该可以唯一标识一个图集，因此爬虫采集过程中可以使用 GID 作为主键。&lt;/p&gt;

&lt;p&gt;EH网站上提供的下载方式包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Archive Download：打包下载，需要支付 Credits （不知道什么鬼）&lt;/li&gt;
  &lt;li&gt;Torrent Download：BT下载，有的图集会有BT下载方式，不是所有的都有&lt;/li&gt;
  &lt;li&gt;H@H Downloader：Hentai@Home 下载方式，点击这个列表会生成一个 list，可以用 H@H 这个P2P 软件进行解析并下载。看了一下限制比较多，还是老老实实写爬虫扒图吧。不过每次扒图采集到的 list 可以保存下来，用于对下载下来的图片命名以及保存图集信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每一个图集下面就是每一张图片的缩略图（可能会有多页，则需要翻页操作），获得对应的链接后，保存到一个列表中，然后对于列表中的每一个链接，执行以下操作：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GET 链接对应的资源，如果没有高清图，则直接保存图片&lt;/li&gt;
  &lt;li&gt;如果有高清图，则根据高清图的链接获取图片并保存（注意！这一步需要登陆！要么就不扒高清图，要么就导入COOKIES吧）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;经过几天的折腾，爬虫已经基本完成，爬虫的输入是一个图集的URL，输出为抓取过程中的信息，最终图片保存在当前路径的 &lt;code&gt;data&lt;/code&gt; 目录下。&lt;/p&gt;

&lt;p&gt;爬虫的源码放在了github上，链接在这里 &lt;a href=&quot;https://github.com/youkochan/EHSpider&quot;&gt;E绅士爬虫&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下面来总结一下爬虫过程中的收获。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;需求包&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;threading&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PIL&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bs4&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Queue&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;StringIO&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringIO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;用到的包有以下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;os: 用于文件操作，路径选取等&lt;/li&gt;
  &lt;li&gt;re: 正则表达式模块，用于分析URL&lt;/li&gt;
  &lt;li&gt;time: 通过使用 &lt;code&gt;sleep()&lt;/code&gt; 使线程休眠&lt;/li&gt;
  &lt;li&gt;random: 随机库&lt;/li&gt;
  &lt;li&gt;logging: 用于输出日志&lt;/li&gt;
  &lt;li&gt;requests：用于处理网页请求&lt;/li&gt;
  &lt;li&gt;threading: 多线程库&lt;/li&gt;
  &lt;li&gt;Beautiful Soup：用于解析HTML&lt;/li&gt;
  &lt;li&gt;Lxml：第三方HTML的解析器&lt;/li&gt;
  &lt;li&gt;PIL: 提供图片操作，将获得的字节流写入图片文件&lt;/li&gt;
  &lt;li&gt;Queue: Python的Queue模块中提供了同步的、线程安全的队列类，包括FIFO（先入先出)队列Queue，LIFO（后入先出）队列LifoQueue，和优先级队列PriorityQueue。这些队列都实现了锁原语，能够在多线程中直接使用。可以使用队列来实现线程间的同步。&lt;/li&gt;
  &lt;li&gt;StringIO: 提供字节流IO操作&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中 &lt;code&gt;lxml&lt;/code&gt; 包的安装会比较麻烦，一般直接 &lt;code&gt;pip&lt;/code&gt; 安装的话会出错，自己在多个环境下测试了很多次终于都测试成功了（Mac，Ubuntu，Windows），具体安装如下：&lt;/p&gt;

&lt;p&gt;Mac：安装之前运行 &lt;code&gt;xcode --selected&lt;/code&gt;&lt;br /&gt;
Win：&lt;a href=&quot;http://www.lfd.uci.edu/~gohlke/pythonlibs/#lxml&quot;&gt;http://www.lfd.uci.edu/~gohlke/pythonlibs/#lxml&lt;/a&gt; 直接在这里下载一个二进制包再 &lt;code&gt;pip&lt;/code&gt; 安装这个二进制包就可以了。&lt;br /&gt;
Ubuntu：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$sudo&lt;/span&gt; apt-get install libxml2-dev libxslt-dev python2.7-dev  
&lt;span class=&quot;nv&quot;&gt;$sudo&lt;/span&gt; pip install lxml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;记录一下通过这次折腾学到的一些东西吧&lt;/h3&gt;

&lt;h4 id=&quot;requests-&quot;&gt;requests 代理&lt;/h4&gt;

&lt;p&gt;requests 的代理并不支持 socks5 协议。只支持 &lt;code&gt;http&lt;/code&gt; 或者 &lt;code&gt;https&lt;/code&gt; 需要自己转换一下。&lt;/p&gt;

&lt;h4 id=&quot;python-&quot;&gt;Python 多线程&lt;/h4&gt;

&lt;p&gt;Python中使用线程有两种方式：函数或者用类来包装线程对象。&lt;/p&gt;

&lt;p&gt;函数式：调用 &lt;code&gt;thread&lt;/code&gt; 模块中的 &lt;code&gt;start_new_thread()&lt;/code&gt; 函数来产生新线程。语法如下:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_new_thread&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参数说明:&lt;br /&gt;
* function - 线程函数。&lt;br /&gt;
* args - 传递给线程函数的参数, 他必须是个tuple类型。&lt;br /&gt;
* kwargs - 可选参数。&lt;/p&gt;

&lt;p&gt;用类来包装线程的对象：主要有以下几种方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一种方式:创建一个threading.Thread()的实例对象，给它一个函数。在它的初始化函数 &lt;code&gt;__init__&lt;/code&gt; 中将可调用对象作为参数传入&lt;/li&gt;
  &lt;li&gt;第二种方式:创建一个threading.Thread的实例，传给它一个可调用类对象，类中使用 &lt;code&gt;__call__()&lt;/code&gt;函数调用函数&lt;/li&gt;
  &lt;li&gt;第三种方式:是通过继承Thread类，重写它的run方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第一种和第三种比较常用。我这里采用了第三种方式。&lt;/p&gt;

&lt;h4 id=&quot;queue&quot;&gt;线程优先级队列（Queue）&lt;/h4&gt;

&lt;p&gt;Python的Queue模块中提供了同步的、线程安全的队列类，包括FIFO（先入先出)队列Queue，LIFO（后入先出）队列LifoQueue，和优先级队列PriorityQueue。这些队列都实现了锁原语，能够在多线程中直接使用。可以使用队列来实现线程间的同步。最开始写的时候在使用了 &lt;code&gt;Queue&lt;/code&gt; 的条件下，还写了一个线程间的互斥锁，后来发现完全没有必要。&lt;/p&gt;

&lt;p&gt;Queue模块中的常用方法:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Queue.qsize() 返回队列的大小（其实是近似大小因为返回后有可能队列就被改变了）&lt;/li&gt;
  &lt;li&gt;Queue.empty() 如果队列为空，返回True, 反之False&lt;/li&gt;
  &lt;li&gt;Queue.full() 如果队列满了，返回True, 反之False&lt;/li&gt;
  &lt;li&gt;Queue.full 与 maxsize 大小对应&lt;/li&gt;
  &lt;li&gt;Queue.get([block[, timeout]])获取队列元素，timeout等待时间&lt;/li&gt;
  &lt;li&gt;Queue.get_nowait() 相当Queue.get(False)&lt;/li&gt;
  &lt;li&gt;Queue.put(item, [block[, timeout]]) 写入队列，timeout等待时间&lt;/li&gt;
  &lt;li&gt;Queue.put_nowait(item) 相当Queue.put(item, False)&lt;/li&gt;
  &lt;li&gt;Queue.task_done() 在完成一项工作之后，Queue.task_done() 函数向任务已经完成的队列发送一个信号&lt;/li&gt;
  &lt;li&gt;Queue.join() &lt;code&gt;task_done()&lt;/code&gt; 使得任务数目减一，put使得任务数加一，实际上意味着等到任务数为零，再执行别的操作&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;staticmethod-&quot;&gt;@staticmethod 修饰器&lt;/h4&gt;

&lt;p&gt;修饰器的作用其实就是将被修饰的函数作为参数，返回一个新的函数，比如：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@g&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@f&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;得到的结果其实就是 &lt;code&gt;g(f(x))&lt;/code&gt; 。通过 &lt;code&gt;@staticmethod&lt;/code&gt; 修饰后的函数就成为了类的一个静态函数。同时，修饰器也是一个函数，修饰器也可以携带参数。如：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;123&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;456&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;等价于 &lt;code&gt;g(&#39;123&#39;)(f(&#39;456&#39;)(x))&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;类中的私有、保护、公有成员&lt;/h4&gt;

&lt;p&gt;如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线 &lt;code&gt;__&lt;/code&gt; ，在Python中，实例的变量名如果以 &lt;code&gt;__&lt;/code&gt; 开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问&lt;/p&gt;

&lt;p&gt;需要注意的是，在Python中，变量名类似 &lt;code&gt;__xxx__&lt;/code&gt; 的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用 &lt;code&gt;__name__&lt;/code&gt; 、 &lt;code&gt;__score__&lt;/code&gt; 这样的变量名。&lt;/p&gt;

&lt;p&gt;有些时候，你会看到以一个下划线开头的实例变量名，比如 &lt;code&gt;_name&lt;/code&gt; ，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。&lt;/p&gt;

&lt;p&gt;双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问 &lt;code&gt;__name&lt;/code&gt; 是因为Python解释器对外把 &lt;code&gt;__name&lt;/code&gt; 变量改成了 &lt;code&gt;_Student__name&lt;/code&gt;，所以，仍然可以通过 &lt;code&gt;_Student__name&lt;/code&gt; 来访问 &lt;code&gt;__name&lt;/code&gt; 变量：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_Student__name&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#39;Bart Simpson&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;但是强烈建议你不要这么干，因为不同版本的Python解释器可能会把 &lt;code&gt;__name&lt;/code&gt; 改成不同的变量名。&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://blog.qingye.me/write-a-ehentai-ghost/&quot;&gt;编写一个E绅士扒图器&lt;/a&gt; was originally published by Qing YE at &lt;a href=&quot;http://blog.qingye.me&quot;&gt;Simple Blog&lt;/a&gt; on January 15, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[编写一个sublime插件]]></title>
 <link rel="alternate" type="text/html" href="http://blog.qingye.me/write-a-sublime-plugin/" />
  <id>http://blog.qingye.me/write-a-sublime-plugin</id>
  <published>2016-01-12T21:01:39+08:00</published>
  <updated>2016-01-12T21:01:39+08:00</updated>
  <author>
    <name>Qing YE</name>
    <uri>http://blog.qingye.me</uri>
    <email>youkochan233@gmail.com</email>
  </author>
  <content type="html">
    &lt;!--more--&gt;

&lt;h2 id=&quot;section&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;最近几天折腾了一下 &lt;code&gt;sublime text 2&lt;/code&gt; 的语法插件，简而言之呢，就是通过正则表达式提取出符合一定格式的字符串，赋予相应的 &lt;code&gt;scopeName&lt;/code&gt;，而不同的 &lt;code&gt;scopeName&lt;/code&gt; 对应着不同的颜色，颜色则定义在 &lt;code&gt;Color Scheme&lt;/code&gt; 中。因此，使用不同的 &lt;code&gt;Color Scheme&lt;/code&gt; 不会影响语法解析的进行。&lt;/p&gt;

&lt;p&gt;sublime text 插件开发使用到的文件有以下几种：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;file or extensions&lt;/th&gt;
      &lt;th&gt;introduce&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;*.py&lt;/td&gt;
      &lt;td&gt;用于开发各类Python插件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;package-metadata.json&lt;/td&gt;
      &lt;td&gt;保存包的各种信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Main.sublime-menu&lt;/td&gt;
      &lt;td&gt;插件主菜单的按钮&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Context.sublime-menu&lt;/td&gt;
      &lt;td&gt;插件右键菜单按钮&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Default (Linux).sublime-keymap&lt;/td&gt;
      &lt;td&gt;Linux下默认快捷键&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Default (OSX).sublime-keymap&lt;/td&gt;
      &lt;td&gt;OS X下默认快捷键&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Default (Windows).sublime-keymap&lt;/td&gt;
      &lt;td&gt;Windows下默认快捷键&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;*.sublime-commands&lt;/td&gt;
      &lt;td&gt;插件的各种指令&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;*.sublime-completions&lt;/td&gt;
      &lt;td&gt;插件的自动补全&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;*.sublime-settings&lt;/td&gt;
      &lt;td&gt;一些其他设置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;*.sublime-snippet&lt;/td&gt;
      &lt;td&gt;快速完成的代码片段&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;*.JSON-tmLanguage&lt;/td&gt;
      &lt;td&gt;AAAPackageDev支持的JSON格式的tmLanguage&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;*.YAML-tmLanguage&lt;/td&gt;
      &lt;td&gt;AAAPackageDev支持的YAML格式的tmLanguage&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;.tmLanguage&lt;/td&gt;
      &lt;td&gt;语法解析文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;.tmLanguage.caiche&lt;/td&gt;
      &lt;td&gt;语法解析文件的缓存&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;.tmTheme&lt;/td&gt;
      &lt;td&gt;配色文件&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;最开始想写一个插件主要是因为使用 &lt;code&gt;Markdown Jekyll&lt;/code&gt; 时有配色会显示错误，就想自己研究一下 sublime 的机智来写一下。后来写的时候发现 sublime 插件开发其实也是挺简单的一件事情，因为 sublime 已经把各种可能会进行开发的地方都做好了相应的接口，比如开发语法文件只需要编写 .tmLanguage，开发配色文件只需要编写 tmTheme 文件即可。因此插件的开发难度不是很大。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that the regular expressions are matched against only a single line of the document at a time. That means it is not possible to use a pattern that matches multiple lines. The reason for this is technical: being able to restart the parser at an arbitrary line and having to re-parse only the minimal number of lines affected by an edit. In most situations it is possible to use the begin/end model to overcome this limitation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;唯一暂时无法解决的问题是，sublime 采用的 textmate 编辑器，而这个编辑器匹配语法时是 &lt;a href=&quot;http://manual.macromates.com/en/language_grammars#language_rules&quot;&gt;按行匹配&lt;/a&gt; 的。因此如果需要进行跨行的正则匹配，就会出现很麻烦的情况。&lt;/p&gt;

&lt;p&gt;比如对于代码块，如果需要前后两行都是空行，则无法进行处理。（其实 &lt;code&gt;Markdown Extended&lt;/code&gt; 在一定程度上用一些很复杂难懂的正则表达式解决了这个问题，而我比较希望自己写的东西尽可能简单，这样以后可以在此基础上增加新的需求，因此就没有往这方面更深入地研究）&lt;/p&gt;

&lt;h2 id=&quot;tmlanguage&quot;&gt;tmLanguage&lt;/h2&gt;

&lt;p&gt;这个文件定义了语法解析的方式。参考 &lt;a href=&quot;http://manual.macromates.com/en/language_grammars#language_rules&quot;&gt;Language Grammars&lt;/a&gt; 。主要关键字如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;key&lt;/th&gt;
      &lt;th&gt;function&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;给匹配的字符串分配的名字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;match&lt;/td&gt;
      &lt;td&gt;正则表达式（不能与begin以及end一起使用）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;begin, end&lt;/td&gt;
      &lt;td&gt;为了解决不能跨行的问题，采用的机制，对应多行的开始和结束&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;contentName&lt;/td&gt;
      &lt;td&gt;给 begin/end 之间的内容分配名字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;captures, beginCaptures, endCaptures&lt;/td&gt;
      &lt;td&gt;给 match 中的特定位置的匹配分配名字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;include&lt;/td&gt;
      &lt;td&gt;适用于嵌入式语法&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;tmtheme&quot;&gt;tmTheme&lt;/h2&gt;

&lt;p&gt;这个文件定义了解析出的名字对应的颜色，可以通过 &lt;a href=&quot;http://tmtheme-editor.herokuapp.com/#!/editor/theme/Monokai%20Extended%20Mod&quot;&gt;这个在线应用&lt;/a&gt; 进行快速编辑。其中的 &lt;code&gt;scopeName&lt;/code&gt; 对应的就是 &lt;code&gt;tmLanguage&lt;/code&gt; 中的 name。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;一些比较蛋疼的在这里的正则文法&lt;/h2&gt;

&lt;p&gt;以下写法为 &lt;code&gt;tmLanguage&lt;/code&gt; 中的写法。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;有时候需要将整行进行匹配（比如代码块的背景等），需要使用 &lt;code&gt;^.*\\n&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;(?=)&lt;/code&gt; 执行正向预测先行搜索的子表达式，即预测符合即可，但不匹配&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;(?!)&lt;/code&gt; 执行反向预测先行搜索的子表达式，即预测不符合，也不进行匹配&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://manual.macromates.com/en/&quot;&gt;textmate manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;http://blog.qingye.me/write-a-sublime-plugin/&quot;&gt;编写一个sublime插件&lt;/a&gt; was originally published by Qing YE at &lt;a href=&quot;http://blog.qingye.me&quot;&gt;Simple Blog&lt;/a&gt; on January 12, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[sublime 常用插件记录]]></title>
 <link rel="alternate" type="text/html" href="http://blog.qingye.me/sublime-plugins/" />
  <id>http://blog.qingye.me/sublime-plugins</id>
  <published>2016-01-07T15:00:00+08:00</published>
  <updated>2016-01-07T15:00:00+08:00</updated>
  <author>
    <name>Qing YE</name>
    <uri>http://blog.qingye.me</uri>
    <email>youkochan233@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;（首先声明，这里的常用当然是指对于我来说的常用&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;yocdown&quot;&gt;YocDown&lt;/h3&gt;

&lt;p&gt;链接：&lt;a href=&quot;https://github.com/youkochan/yocdown&quot;&gt;YocDown&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;排第一的当然是自己写的插件，虽然还是很简单很弱比。主要作用是解析一些特定格式的 markdown 语法，仍在不断完善中。&lt;/p&gt;

&lt;h3 id=&quot;package-control&quot;&gt;Package Control&lt;/h3&gt;

&lt;p&gt;不必多说&lt;/p&gt;

&lt;h3 id=&quot;imesupport&quot;&gt;IMESupport&lt;/h3&gt;

&lt;p&gt;用来解决中文输入法不跟随的问题。&lt;/p&gt;

&lt;h3 id=&quot;terminal&quot;&gt;Terminal&lt;/h3&gt;

&lt;p&gt;当你想要打开在当前文件所在的目录的终端，这个插件可以帮助你。不过，在默认情况下，它设置按 Ctrl / Cmd + Shift + T 键的快捷方式打开终端。不过这也是打开上次关闭的文件的快捷方式，你需要修改一个快捷键来兼容两个功能。&lt;/p&gt;

&lt;h3 id=&quot;sublimerepl&quot;&gt;SublimeREPL&lt;/h3&gt;

&lt;p&gt;这可能是对程序员最有用的插件。SublimeREPL 允许你在 Sublime Texxt 中运行各种语言（NodeJS ， Python，Ruby， Scala 和 Haskell 等等）。&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/blog/sublime-plugins-1.jpg&quot;&gt;
		&lt;img src=&quot;/images/blog/sublime-plugins-1.jpg&quot; alt=&quot;&quot; /&gt;
	&lt;/a&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;allautocomplete&quot;&gt;AllAutocomplete&lt;/h3&gt;

&lt;p&gt;Sublime Text 默认的 Autocomplete 功能只考虑当前的文件，而 AllAutocomplete 插件会搜索所有打开的文件来寻找匹配的提示词。&lt;/p&gt;

&lt;figure&gt;s
	&lt;a href=&quot;/images/blog/sublime-plugins-2.jpg&quot;&gt;
		&lt;img src=&quot;/images/blog/sublime-plugins-2.jpg&quot; alt=&quot;&quot; /&gt;
	&lt;/a&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;markdown-preview&quot;&gt;Markdown Preview&lt;/h3&gt;

&lt;p&gt;用于预览 Markdown&lt;/p&gt;

&lt;h3 id=&quot;docblockr&quot;&gt;DocBlockr&lt;/h3&gt;

&lt;p&gt;如果你遵循的编码的风格很严格，这款插件能够使你的任务更容易。DocBlokr 帮助你创造你的代码注释，通过解析功能，参数，变量，并且自动添加基本项目。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;主题以及配色&lt;/h3&gt;

&lt;p&gt;主要使用的是以下的几种&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Theme - Centurion&lt;/li&gt;
  &lt;li&gt;Theme - Flatland&lt;/li&gt;
  &lt;li&gt;Color Scheme - Monokai Extended&lt;/li&gt;
&lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;http://blog.qingye.me/sublime-plugins/&quot;&gt;sublime 常用插件记录&lt;/a&gt; was originally published by Qing YE at &lt;a href=&quot;http://blog.qingye.me&quot;&gt;Simple Blog&lt;/a&gt; on January 07, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[2015总结]]></title>
 <link rel="alternate" type="text/html" href="http://blog.qingye.me/2016/" />
  <id>http://blog.qingye.me/2016</id>
  <published>2016-01-02T23:09:15+08:00</published>
  <updated>2016-01-02T23:09:15+08:00</updated>
  <author>
    <name>Qing YE</name>
    <uri>http://blog.qingye.me</uri>
    <email>youkochan233@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;总结一下2015，展望一下2016。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;好像也没啥要总结的。回家了有闲心就写一个吧。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://blog.qingye.me/2016/&quot;&gt;2015总结&lt;/a&gt; was originally published by Qing YE at &lt;a href=&quot;http://blog.qingye.me&quot;&gt;Simple Blog&lt;/a&gt; on January 02, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[linux学习笔记（七）— 配置网络系统]]></title>
 <link rel="alternate" type="text/html" href="http://blog.qingye.me/linux-note-7/" />
  <id>http://blog.qingye.me/linux-note-7</id>
  <published>2015-12-14T11:05:00+08:00</published>
  <updated>2015-12-14T11:05:00+08:00</updated>
  <author>
    <name>Qing YE</name>
    <uri>http://blog.qingye.me</uri>
    <email>youkochan233@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;配置网络系统一章的杂七杂八的记录。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;socket&quot;&gt;有关socket系统调用&lt;/h2&gt;

&lt;p&gt;进程每次调用socket返回的fd值即用户空间的fd数组的下标。0到3分别是标准输入，标准输出，标准错误。&lt;/p&gt;

&lt;p&gt;常规文件系统中常用的open系统操作并不能创建socket，只能使用socketAPI创建，一旦创建，IO操作就和普通文件或者设备一样了。&lt;/p&gt;

&lt;p&gt;VFS为了使socket系统工作，socket提供了两个数据结构（位于 &lt;em&gt;Socket.c (linux-2.6.32.68\net)&lt;/em&gt;）：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super_operations&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockfs_ops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alloc_inode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;sock_alloc_inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destroy_inode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock_destroy_inode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statfs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;simple_statfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_operations&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket_file_ops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;THIS_MODULE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;llseek&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;no_llseek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aio_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;sock_aio_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aio_write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;sock_aio_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;poll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;sock_poll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unlocked_ioctl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock_ioctl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifdef CONFIG_COMPAT&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compat_ioctl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compat_sock_ioctl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mmap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;sock_mmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;sock_no_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* special open code to disallow open via /proc */&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;release&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;sock_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fasync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;sock_fasync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendpage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;sock_sendpage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splice_write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generic_splice_sendpage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splice_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;sock_splice_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;前者是必须的用于创建VFS所必须的inode，使得VFS可以对其进行文件级别的管理；后者是可选的，用户层可以使用标准文件系统的操作如 &lt;code&gt;read()&lt;/code&gt; &lt;code&gt;write()&lt;/code&gt; 对socket文件进行操作，也可以采用系统提供的 &lt;code&gt;send()&lt;/code&gt; &lt;code&gt;recv()&lt;/code&gt; 接口对socket对象进行处理，但是二者都归一到网络内部实现的代码中。&lt;/p&gt;

&lt;p&gt;通过 &lt;code&gt;sock_map_fd&lt;/code&gt; 只想了一个file指针，这个文件指针用来维护与该socket相关联的伪文件的状态。内核会在INET层和Network层分别创建一个实体来对应你打开的那个文件描述符，而后你对该文件描述符的操作都是通过这两个数据结构实体来完成的。因为系统为每次socket系统调用都创建了一个三元组 (file, socket, sock)，所以也不会出现文件的互斥操作，避免了锁的开销。应用程序要访问内核模块时，都通过fd去操作，内核会在fd对应的数组单元内查找到相应的socket，然后继续操作。&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/blog/linux-note-7-1.png&quot;&gt;
		&lt;img src=&quot;/images/blog/linux-note-7-1.png&quot; alt=&quot;&quot; /&gt;
	&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;创建sock{}是调用 &lt;code&gt;sk_alloc&lt;/code&gt; 接口，根据协议的不用创建不同的sock结构，但是返回的指针都是 &lt;code&gt;sock{}&lt;/code&gt; 指针，返回后通过强制类型转换，转换为相应的数据结构。&lt;/p&gt;

&lt;h2 id=&quot;fib&quot;&gt;FIB系统&lt;/h2&gt;

&lt;p&gt;Linux系统中主要保存了三种与路由相关的数据：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;物理上和本机相连接的主机地址信息表，相邻表（neigh_table{}）&lt;/li&gt;
  &lt;li&gt;保存了在网络访问中判断一个网络地址应该走什么路由的数据表，路由规则表（fib_table{}）&lt;/li&gt;
  &lt;li&gt;最新使用过的查询路由地址的缓存地址数据表，路由缓存（rtcache），由rtable{}节点组成&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;FIB主要与用户层交互，RT Cahce主要跟协议栈交互。&lt;code&gt;ip_init&lt;/code&gt; 函数就调用 &lt;code&gt;ip_rt_init&lt;/code&gt; 为FIB搭好空架子。&lt;/p&gt;

&lt;p&gt;为了支持多种路由算法和多个路由表，linux内核创造了一个名词：FIB规则（FIB rules）。&lt;/p&gt;

&lt;p&gt;（2.6.14之前）查找路由规则是查找路由表的第一步，先搜索 fib_rules 以找到最匹配的报文规则，满足以下条件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;报文源地址与规则涵盖的源地址属于同一子网&lt;/li&gt;
  &lt;li&gt;报文目的地址与规则涵盖的目的地址属于同一子网&lt;/li&gt;
  &lt;li&gt;报文头设置的TOS与规则设置的一致&lt;/li&gt;
  &lt;li&gt;报文始终的网络接口设备（如果指定了接口的话）与规则设置的一致&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;找到 fib_rule 之后，可以得到正确的FIB表，进而调用FIB表自身的 &lt;code&gt;lookup&lt;/code&gt; 函数。 FIB内部数据结构声明于 &lt;em&gt;Ip_fib.h (linux-2.6.32.68\include\net)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_table&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hlist_node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_hlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;tb_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;tb_default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flowi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk_buff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				     &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netlink_callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_select_default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					     &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flowi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;tb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;tb_id&lt;/code&gt;：表的ID&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tb_lookup&lt;/code&gt;：表的查找操作&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tb_insert&lt;/code&gt;：表的插入操作&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tb_delete&lt;/code&gt;：表的删除操作&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tb_dump&lt;/code&gt;：从表中获取所有的路由（？）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tb_flash&lt;/code&gt;：删除表中所有表项&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tb_select_default&lt;/code&gt;：选择缺省的路由&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tb_data&lt;/code&gt;：指向hash表的一个不透明指针，此表中的其他函数操作此字段，不能被直接访问。利用了编译器的一些特点，来专门存放未知大小的数据。使用不同的内核路由查找算法时结构不同；使用hash算法时，为 fn_hash{} 结构；使用LC-trie算法时，为 trie{} 结构。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;FIB是分层的，逻辑上分为五层：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;根据本地路由与否，分为 local FIB 以及 main FIB&lt;/li&gt;
  &lt;li&gt;FIB 表中的 fn_hash 数组由33个 fn_zone{} 结构的指针组成，将所有的路由由子网掩码的长度（0~32）分为33个部分，每一个 zone 代表了一个唯一确定的子网掩码。 fn_hash 最后一个成员指向掩码最长的 zone 区。&lt;/li&gt;
  &lt;li&gt;fz_zone{} 结构有一个hash表，凡是掩码长度的路由都放在这个hash表中，hash表节点为 fin_node{}&lt;/li&gt;
  &lt;li&gt;同一子网中，有可能由于 TOS 等属性的不同而使用不同的路由，那么每一个 fib_node{} 节点有一个链表以存放 fib_alias{} 结构为节点的路由表项，用来保存路由的 TOS、类型、范围等属性。&lt;/li&gt;
  &lt;li&gt;fib_alias{} 只包含一个 fib_info{} 结构，此结构包含一些相应的参数，如协议、下一跳主机地址、外出的接口设备等。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn_zone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn_zone&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fz_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Next not empty zone	*/&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hlist_head&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fz_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Hash table pointer	*/&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;fz_nent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Number of entries	*/&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;fz_divisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Hash divisor		*/&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;fz_hashmask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* (fz_divisor - 1)	*/&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define FZ_HASHMASK(fz)		((fz)-&amp;gt;fz_hashmask)&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;fz_order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Zone order		*/&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;__be32&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;fz_mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define FZ_MASK(fz)		((fz)-&amp;gt;fz_mask)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;fz_next&lt;/code&gt;：指向下一个非空的 fn_zone{} 结构&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;fz_hash&lt;/code&gt;：哈希表指针&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;fz_nent&lt;/code&gt;：实际就是 fib_node{} 的个数&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;fz_divisor&lt;/code&gt;：和此 zone 相关的哈希表桶数&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;fz_hashmask&lt;/code&gt;：一般为 fz_divisor-1&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;fz_order&lt;/code&gt;：此 zone 位于 fn_hash 数组的位置&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;fz_mask&lt;/code&gt;：子网掩码，如 “0xFFFF” 为16位子网。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hlist_node&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;fn_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_head&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;fn_alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;__be32&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;fn_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_alias&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;fn_embedded_alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;fn_hash&lt;/code&gt;：链接到 &lt;code&gt;fz_hash&lt;/code&gt; 的节点&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;fn_alias&lt;/code&gt;：挂接 &lt;code&gt;fn_alias{}&lt;/code&gt; 的链表&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;fn_key&lt;/code&gt;：路由查找的某个关键值&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_alias&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_head&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;fa_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_info&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fa_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;u8&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;fa_tos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;u8&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;fa_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;u8&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;fa_scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;u8&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;fa_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifdef CONFIG_IP_FIB_TRIE&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcu_head&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;rcu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;fa_list&lt;/code&gt;：链接到 fn_alias 的节点&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;fa_info&lt;/code&gt;：关于此节点的更多信息&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;fa_tos&lt;/code&gt;：TOS&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;fa_type&lt;/code&gt;：路由类型 TYPE&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;fa_scope&lt;/code&gt;：路由范围 SCOPE&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;fa_state&lt;/code&gt;：母鸡啊&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;rcu&lt;/code&gt;：母鸡啊&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/blog/linux-note-7-2.png&quot;&gt;
		&lt;img src=&quot;/images/blog/linux-note-7-2.png&quot; alt=&quot;&quot; /&gt;
	&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;以上各种数据结构之间的关系大致如上图。&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://blog.qingye.me/linux-note-7/&quot;&gt;linux学习笔记（七）— 配置网络系统&lt;/a&gt; was originally published by Qing YE at &lt;a href=&quot;http://blog.qingye.me&quot;&gt;Simple Blog&lt;/a&gt; on December 14, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[linux学习笔记（六）]]></title>
 <link rel="alternate" type="text/html" href="http://blog.qingye.me/linux-note-6/" />
  <id>http://blog.qingye.me/linux-note-6</id>
  <published>2015-12-14T11:05:00+08:00</published>
  <updated>2015-12-14T11:05:00+08:00</updated>
  <author>
    <name>Qing YE</name>
    <uri>http://blog.qingye.me</uri>
    <email>youkochan233@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;网络协议栈各部分内容初始化。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;section&quot;&gt;网络基础设施初始化&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;sock_init&lt;/code&gt; 函数完成了协议栈运行所需的一些基本面环境的初始化，位于 &lt;em&gt;Socket.c (linux-2.6.32.68\net)&lt;/em&gt; 文件中，如网络内存管理（&lt;code&gt;sk_init&lt;/code&gt; 中完成）、和上下层之间的联系（在创建socket文件系统的过程中完成）等。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;网络协议初始化&lt;/h2&gt;

&lt;p&gt;初始化第二个步骤就是使用 &lt;code&gt;fs_initcall&lt;/code&gt; 初始化宏修饰 &lt;code&gt;inet_init&lt;/code&gt; 函数，用于初始化和协议本身相关的东西。&lt;/p&gt;

&lt;p&gt;地址族：即套接字接口的种类，每种套接字种类都有自己的通信寻址方法，Linux将不同的地址族抽象统一为BSD套接字接口，应用程序关心的只是BSD套接字接口。地址族定义域于 &lt;em&gt;Af_inet.c (linux-2.6.32.68\net\ipv4)&lt;/em&gt; 以及 &lt;em&gt;Af_inet6.c (linux-2.6.32.68\net\ipv6)&lt;/em&gt; ，BSD套接字还定义了多种我们熟知的套接字类型，如流（stream），数据报（datagram），以及原始包（raw）。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;inet_init&lt;/code&gt; 函数中依次调用了以下几个比较重要的函数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;proto_register(&amp;amp;tcp_prot, 1)&lt;/code&gt; ：为TCP的proto{}结构申请空间，并将其挂到全局链表 &lt;em&gt;proto_list&lt;/em&gt; 上。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;proto_register(&amp;amp;udp_prot, 1)&lt;/code&gt; ：为UDP的proto{}结构申请空间，并将其挂到全局链表 &lt;em&gt;proto_list&lt;/em&gt; 上。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;proto_register(&amp;amp;raw_prot, 1)&lt;/code&gt; ：为RAW的proto{}结构申请空间，并将其挂到全局链表 &lt;em&gt;proto_list&lt;/em&gt; 上。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;sock_register(&amp;amp;inet_family_ops)&lt;/code&gt; ：将 &lt;em&gt;inet_family_ops&lt;/em&gt; 塞入 &lt;em&gt;net_families&lt;/em&gt; 数组中。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;inet_add_protocol(&amp;amp;icmp_protocol, IPPROTO_ICMP)&lt;/code&gt; ：注册ICMP接收函数&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;inet_add_protocol(&amp;amp;udp_protocol, IPPROTO_UDP)&lt;/code&gt; ：注册UDP接收函数&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;inet_add_protocol(&amp;amp;tcp_protocol, IPPROTO_TCP)&lt;/code&gt; ：注册TCP接收函数&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;inet_register_protosw(q)&lt;/code&gt; ：用于注册非永久协议，即保存在 &lt;code&gt;inetsw_array&lt;/code&gt; 中的协议。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;arp_init()&lt;/code&gt; ：用以完成系统neighbour表的初始化&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ip_init()&lt;/code&gt; ：用以完成系统IP模块的初始化&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tcp_v4_init()&lt;/code&gt; ：（貌似什么都木有做）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tcp_init()&lt;/code&gt; ：用以完成TCP协议所需要的各项hash表以及 &lt;code&gt;sysctl_xxx&lt;/code&gt; 全局配置项的初始化&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;udp_init()&lt;/code&gt; ：Setup UDP memory threshold&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;udplite4_register&lt;/code&gt; ：Add UDP-Lite (RFC 3828)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;icmp_init()&lt;/code&gt; ：ICMP协议初始化&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;dev_add_pack(&amp;amp;ip_packet_type)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/blog/linux-note-6-1.png&quot;&gt;
		&lt;img src=&quot;/images/blog/linux-note-6-1.png&quot; alt=&quot;&quot; /&gt;
	&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;发送报文时，数据会由socket{}通过相应的proto_ops{}把数据传给sock{}，sock{}又通过proto{}把数据传到sk_buff{}；反过来，当收到报文的时候，sk_buff{}通过net_protocol{}把数据传给sock{}，后者又通过proto{}把数据传给socket{}，socket{}最后把数据传给用户层。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;设备初始化&lt;/h2&gt;

&lt;p&gt;首先是抽象设备层的初始化，用以为网络协议提供统一的发送、接收接口，由 &lt;code&gt;net_dev_init&lt;/code&gt; 函数完成，位于 &lt;em&gt;Dev.c (linux-2.6.32.68\net\core)&lt;/em&gt; 。主要作用是为网络设备设置一些基础功能，比如proc文件系统、sysfs系统、全局设备和索引表等，以及对 &lt;code&gt;queue&lt;/code&gt; 各项成员的初始化。&lt;/p&gt;

&lt;h2 id=&quot;pci&quot;&gt;底层PCI模块的初始化&lt;/h2&gt;

&lt;p&gt;有关底层PCI网卡的初始化，就不打算深究了。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://blog.qingye.me/linux-note-6/&quot;&gt;linux学习笔记（六）&lt;/a&gt; was originally published by Qing YE at &lt;a href=&quot;http://blog.qingye.me&quot;&gt;Simple Blog&lt;/a&gt; on December 14, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[linux学习笔记（五）— VFS]]></title>
 <link rel="alternate" type="text/html" href="http://blog.qingye.me/linux-note-5/" />
  <id>http://blog.qingye.me/linux-note-5</id>
  <published>2015-12-14T11:05:00+08:00</published>
  <updated>2015-12-14T11:05:00+08:00</updated>
  <author>
    <name>Qing YE</name>
    <uri>http://blog.qingye.me</uri>
    <email>youkochan233@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;VFS&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;vfs&quot;&gt;虚拟文件系统（VFS）&lt;/h2&gt;

&lt;p&gt;VFS是物理文件系统与服务之间的一个接口层，它对Linux的每一个文件系统的全部细节进行抽象，使得不同的文件系统在Linux核心以及系统中运行的进程看来都是相同的。VFS仅存在于内存中，不存在于任何外存空间。管理VFS的数据结构的组成部分主要包括超级块和inode。&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/blog/linux-note-5-1.png&quot;&gt;
		&lt;img src=&quot;/images/blog/linux-note-5-1.png&quot; alt=&quot;&quot; /&gt;
	&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;VFS描述文件系统使用超级块和inode的方式，所谓超级块就是对所有文件系统的管理机构，每种文件系统都要把自己的信息挂到 &lt;code&gt;super_blocks&lt;/code&gt; 这个全局链表上，挂载步骤如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;每个文件系统通过 &lt;code&gt;register_filesystem&lt;/code&gt; 函数将自己的 &lt;code&gt;file_system_type&lt;/code&gt; 挂接到 &lt;code&gt;file_systems&lt;/code&gt; 这个全局变量上&lt;/li&gt;
  &lt;li&gt;然后调用 &lt;code&gt;kern_mount&lt;/code&gt; 函数把自己的文件相关操作函数集合表挂到 &lt;code&gt;super_blocks&lt;/code&gt; 上。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;因此，一个实际的文件系统要能够工作必须创建三种数据类型 &lt;code&gt;super_block&lt;/code&gt; &lt;code&gt;file_system_type&lt;/code&gt; &lt;code&gt;super_operation&lt;/code&gt; 的三元组。&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/blog/linux-note-5-2.png&quot;&gt;
		&lt;img src=&quot;/images/blog/linux-note-5-2.png&quot; alt=&quot;&quot; /&gt;
	&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;文件系统由子目录和文件组成，都只能用唯一的inode来进行描述。VFS inode 的内容取自物理设备上的文件系统，由文件系统制定的操作函数来填写。VFS inode 只存在于内存中，可以用过inode缓存来进行访问。&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://blog.qingye.me/linux-note-5/&quot;&gt;linux学习笔记（五）— VFS&lt;/a&gt; was originally published by Qing YE at &lt;a href=&quot;http://blog.qingye.me&quot;&gt;Simple Blog&lt;/a&gt; on December 14, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[linux学习笔记（四）— 基本数据结构]]></title>
 <link rel="alternate" type="text/html" href="http://blog.qingye.me/linux-note-4/" />
  <id>http://blog.qingye.me/linux-note-4</id>
  <published>2015-12-11T14:07:00+08:00</published>
  <updated>2015-12-11T14:07:00+08:00</updated>
  <author>
    <name>Qing YE</name>
    <uri>http://blog.qingye.me</uri>
    <email>youkochan233@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;linux内核代码阅读过程中采用了一大堆通用数据结构或者一些通用方法，首先单独拿出来分析一下。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;listhead&quot;&gt;链表结构（list_head）&lt;/h2&gt;

&lt;p&gt;链表结构声明在文件&lt;em&gt;List.h (linux-2.6.32.68\include\linux)&lt;/em&gt;中，为：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_head&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;需要注意的是链表结构体中并不包含数据域，在linux内核中，不是链表结构中包含数据，而是在数据结构中包含链表节点。&lt;/p&gt;

&lt;p&gt;那么，如何通过链表地址访问到包含这个链表节点的数据结构呢？linux提供了一个叫 &lt;code&gt;list_entry(ptr, type, member)&lt;/code&gt; 的宏定义。 &lt;code&gt;ptr&lt;/code&gt; 为链表指针， &lt;code&gt;type&lt;/code&gt; 为数据结构的类型， &lt;code&gt;member&lt;/code&gt; 则是数据项类型中的某一个成员。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;list_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proto_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define list_entry(ptr, type, member) \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;	container_of(ptr, type, member)&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define container_of(ptr, type, member) ({			\&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;	const typeof(((type *)0)-&amp;gt;member) * __mptr = (ptr);	\&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;	(type *)((char *)__mptr - offsetof(type, member)); })&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;list_entry&lt;/code&gt; 利用了数据结构中偏移量不变的性质来根据链表地址求得数据结构地址。&lt;/p&gt;

&lt;h2 id=&quot;hlist&quot;&gt;哈希链表（hlist）&lt;/h2&gt;

&lt;p&gt;hlist是 &lt;strong&gt;hash list&lt;/strong&gt; 的简称，即用拉链法实现的hash数据结构。由两部分组成：hash链表以及冲突链。&lt;/p&gt;

&lt;p&gt;或许Linux链表设计者认为双头（list_head）结构对于hash表来说比较浪费，因此设计了另外一套hlist结构，单指针表头以及双循环链表：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hlist_head&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hlist_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hlist_node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hlist_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pprev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;表头之所以采用单指针，因为往往哈希表的规模都是超级巨大的，这样可以节省 KEY * 4BYTES 字节的空间。&lt;/p&gt;

&lt;h2 id=&quot;likely--unlikely&quot;&gt;likely 以及 unlikely&lt;/h2&gt;

&lt;p&gt;linux内核中有这么两个神奇的宏定义， likely 以及 unlikely，顾名思义，“可能”以及“不太可能”，位于文件&lt;em&gt;Compiler.h (linux-2.6.32.68\include\linux)&lt;/em&gt;，定义如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;# define likely(x)      __builtin_expect(!!(x), 1)&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;# define unlikely(x)    __builtin_expect(!!(x), 0)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其中 &lt;code&gt;__builtin_expect&lt;/code&gt; 是GCC编译器内置的关键词，用来优化生成的汇编代码。那么具体如何优化呢？&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/blog/linux-note-4-1.png&quot;&gt;
		&lt;img src=&quot;/images/blog/linux-note-4-1.png&quot; alt=&quot;&quot; /&gt;
	&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;这里要简单说一下CPU流水线的概念，一般情况下汇编代码是顺序生成的，因此，不进行优化时， &lt;code&gt;do_thing2&lt;/code&gt;的代码会先装入流水线，但是它“不太可能会执行”，所以流水线必须排空之后才能把 &lt;code&gt;do_thing3&lt;/code&gt; 的代码进行装入，造成了性能损失。但是优化后，&lt;code&gt;unlikely&lt;/code&gt; 的指令被移到了后方，这样程序更有可能顺序执行 &lt;code&gt;do_thing3&lt;/code&gt; ，而 &lt;code&gt;do_thing2&lt;/code&gt; 几乎就不需要装入流水线，大大提高了性能。&lt;/p&gt;

&lt;h2 id=&quot;elf&quot;&gt;ELF文件格式&lt;/h2&gt;

&lt;p&gt;ELF是*nix系统上可执行文件的标准格式。ELF格式的可执行文件可有多个section。ELF有三种不同的形式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Relocatable：由编译器和汇编器生成，由linker处理它&lt;/li&gt;
  &lt;li&gt;Executable：所有的重定位和符号解析都完成了，也许共享库的符号要在运行时候解析&lt;/li&gt;
  &lt;li&gt;Shared Object：包含linker需要的符号信息和运行时刻所需的代码。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;linux&quot;&gt;Linux镜像分析&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Init.h (linux-2.6.32.68\include\linux)&lt;/em&gt;文件中定义了各初始化代码所处的位置（处于ELF文件的某个section）。&lt;br /&gt;
&lt;em&gt;Vmlinux.lds.h (linux-2.6.32.68\include\asm-generic)&lt;/em&gt;文件为使内核成为内核的 ld script，其主要目的是对输出文件中的 section 进行排序，并定义相关的符号名。在这个文件中定义了 &lt;code&gt;__initcall_start&lt;/code&gt; 以及 &lt;code&gt;__initcall_end&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;因此，编译器在编译整个源代码的时候，会把所有定义为 &lt;code&gt;__init&lt;/code&gt; 的函数放在以 &lt;code&gt;__initcall_start&lt;/code&gt; 开始、以 &lt;code&gt;__initcall_end&lt;/code&gt; 结尾的节中，在 &lt;code&gt;basic_init&lt;/code&gt; 中会逐个调用该节里的所有的函数。&lt;/p&gt;

&lt;p&gt;系统初始化各个模块有两种方式，我们一般可以在编译内核的时候进行控制，分别为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;嵌入内核中：将设备驱动模块嵌入整个linux内核（vmlinux）中，系统启动的时候会从 &lt;strong&gt;.init&lt;/strong&gt; 代码段执行他们的初始化函数，所以我们可以在编译好的 vmlinux 文件中找到 &lt;code&gt;__initcall_xxx_drv_init&lt;/code&gt; 函数。&lt;/li&gt;
  &lt;li&gt;以模块方式进行加载：将设备驱动模块编译成独立的可执行文件，以 &lt;code&gt;.ko&lt;/code&gt; 为后缀名，放在 &lt;strong&gt;/lib/modules/2.6.xxx/kernel/&lt;/strong&gt; 目录下。系统启动时，内核启动代码执行 &lt;strong&gt;/etc/rc.d/rc.sysinit&lt;/strong&gt; 脚本，脚本中的代码会执行 &lt;code&gt;sys_init_module&lt;/code&gt; 内核函数把他们加载到内核中。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;[tips] 网上有资料说：凡是被 __init 修饰过的函数在被调用一次后，其占用的内存区会被清除掉，以便让其他代码可以使用。不知道是真是假。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;中断简单基础知识&lt;/h2&gt;

&lt;p&gt;不管是内部中断还是外部中断，系统都会根据接受到的中断信息，查询 &lt;code&gt;idt_table&lt;/code&gt; ，表中按照中断源的位置排序组成，并对应中断服务程序（以及中断异常处理程序）的入口地址。Linux系统在初始化页式虚拟内存管理后，便调用 &lt;code&gt;trap_init&lt;/code&gt; 和 &lt;code&gt;init_IRQ&lt;/code&gt; 两个函数进行ing中断机制的初始化。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;中断相关的锁&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;local_irq_disable&lt;/code&gt; / &lt;code&gt;local_irq_enable&lt;/code&gt; ，表示只是对当前执行上下文的CPU进行开/关中断操作。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;spin_lock&lt;/code&gt; / &lt;code&gt;spin_inlock&lt;/code&gt; ，采用的方式是让一个进程运行，其他进程进行忙等待。目前大多数计算机都是单CPU系统（多核并不是多CPU），而在单CPU系统上微观来说任意时刻仅仅只有一个进程在运行，因此在单处理器系统中这两函数被定义为空。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;semaphore--spinlock&quot;&gt;semaphore 与 spin_lock&lt;/h2&gt;

&lt;p&gt;这两个机制解决的问题都是进程之间的互斥问题，都是让一个进程退出临界区后再让另一个进程进入的方法。sempahore机制实行的是让进程暂时让出CPU，进入等待队列等待的策略。而spin_lock实行的却是让一个进程在原地空转，等待另一个进程结束的策略。&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://blog.qingye.me/linux-note-4/&quot;&gt;linux学习笔记（四）— 基本数据结构&lt;/a&gt; was originally published by Qing YE at &lt;a href=&quot;http://blog.qingye.me&quot;&gt;Simple Blog&lt;/a&gt; on December 11, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[[leetcode] - Find Median from Data Stream]]></title>
 <link rel="alternate" type="text/html" href="http://blog.qingye.me/leetcode-find-median-from-data-stream/" />
  <id>http://blog.qingye.me/leetcode-find-median-from-data-stream</id>
  <published>2015-12-10T23:01:00+08:00</published>
  <updated>2015-12-10T23:01:00+08:00</updated>
  <author>
    <name>Qing YE</name>
    <uri>http://blog.qingye.me</uri>
    <email>youkochan233@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Find Median from Data Stream&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/find-median-from-data-stream/&quot;&gt;Find Median from Data Stream&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.&lt;br /&gt;
Examples: [2,3,4] , the median is 3&lt;br /&gt;
[2,3], the median is (2 + 3) / 2 = 2.5&lt;br /&gt;
Design a data structure that supports the following two operations:
void addNum(int num) - Add a integer number from the data stream to the data structure.&lt;br /&gt;
double findMedian() - Return the median of all elements so far.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;设计一种数据结构，可以支持一下两种操作：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;增加一个数字&lt;/li&gt;
  &lt;li&gt;求所有数字的中位数&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;解题思路：使用一个大顶堆以及一个小顶堆来保存所有添加过的数字，大顶堆和小顶堆满足以下性质：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;大顶堆中的每一个元素都小于或等于小顶堆中的任意元素；&lt;/li&gt;
  &lt;li&gt;大顶堆中元素数目大于或者等于小顶堆中元素数目&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;满足以上条件后，所求的中位数即：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;当大顶堆数目等于小顶堆数目时，所求中位数即：(maxHeapTop + minHeapTop) / 2；&lt;/li&gt;
  &lt;li&gt;当数目不等时，所求中位数即大顶堆顶：maxHeapTop；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;堆的构建可以使用&lt;code&gt;std&lt;/code&gt;中的函数&lt;code&gt;pop_heap&lt;/code&gt;以及&lt;code&gt;push_heap&lt;/code&gt;，大小顶堆的区别在于比较函数的不同。代码如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cmpMinHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cmpMaxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MedianFinder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// 保证大顶堆中的元素都小于小顶堆的元素&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// 保证小顶堆种的元素都大于大顶堆的元素&lt;/span&gt;
							&lt;span class=&quot;c1&quot;&gt;// 同时保证大顶堆中元素数目大于或等于小顶堆&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Adds a number into the data structure.&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// 插入大顶堆，将插入后的堆顶推出后插入小顶堆&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;push_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmpMaxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;pop_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmpMaxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxHeapTop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;minHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxHeapTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;push_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmpMinHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// 直接插入小顶堆&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;minHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;push_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmpMinHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// 直接插入大顶堆&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;push_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmpMaxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    		&lt;span class=&quot;c1&quot;&gt;// 插入小顶堆，将插入后的堆顶推出后插入大顶堆&lt;/span&gt;
    		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;minHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;push_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmpMinHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;pop_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmpMinHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minHeapTop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;minHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minHeapTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    			&lt;span class=&quot;n&quot;&gt;push_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmpMaxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Returns the median of current data stream&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findMedian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// cout &amp;lt;&amp;lt; &amp;quot;======&amp;quot; &amp;lt;&amp;lt; endl;&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// for (int i : maxHeap) cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;quot; &amp;quot;; cout &amp;lt;&amp;lt; endl;&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// for (int i : minHeap) cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;quot; &amp;quot;; cout &amp;lt;&amp;lt; endl;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        	&lt;span class=&quot;c1&quot;&gt;// cout &amp;lt;&amp;lt; maxHeap[0] &amp;lt;&amp;lt; endl;&lt;/span&gt;
        	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        	&lt;span class=&quot;c1&quot;&gt;// cout &amp;lt;&amp;lt; double(maxHeap[0] + minHeap[0]) / 2 &amp;lt;&amp;lt; endl;&lt;/span&gt;
        	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


    &lt;p&gt;&lt;a href=&quot;http://blog.qingye.me/leetcode-find-median-from-data-stream/&quot;&gt;[leetcode] - Find Median from Data Stream&lt;/a&gt; was originally published by Qing YE at &lt;a href=&quot;http://blog.qingye.me&quot;&gt;Simple Blog&lt;/a&gt; on December 10, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[leetcode-note-6]]></title>
 <link rel="alternate" type="text/html" href="http://blog.qingye.me/leetcode-note-6/" />
  <id>http://blog.qingye.me/leetcode-note-6</id>
  <published>2015-12-10T14:39:32+08:00</published>
  <updated>2015-12-10T14:39:32+08:00</updated>
  <author>
    <name>Qing YE</name>
    <uri>http://blog.qingye.me</uri>
    <email>youkochan233@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;leetcode的又一些记录。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;best-time-to-buy-and-sell-stock-with-cooldown&quot;&gt;309 Best Time to Buy and Sell Stock with Cooldown&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/&quot;&gt;309 Best Time to Buy and Sell Stock with Cooldown&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Say you have an array for which the ith element is the price of a given stock on day i.&lt;br /&gt;
Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:&lt;br /&gt;
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;解题思路：用s0[i] s1[i] s2[i] 分别表示第 i 天处于 “未买入” “已买入” “已卖出” 状态时能获得的最大收益。可知：&lt;br /&gt;
s0[i] 为 s0[i-1] 与 s2[i-1] 中的最大值&lt;br /&gt;
s1[i] 为 s1[i-1] 与 s0[i-1] - prices[i] 中的最大值。因为第 i 天进行了买入操作。&lt;br /&gt;
s2[i] 为 s1[i-1] + prices[i]，因为需要第 i 天达到 s2 状态，则必须从 s1 状态执行卖出操作，不能由 s2 状态到达 s2 状态。&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxProfit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_MIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;additive-number&quot;&gt;306 Additive Number&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/additive-number/&quot;&gt;Additive Number&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Additive number is a string whose digits can form additive sequence.&lt;br /&gt;
A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.&lt;br /&gt;
For example:”112358” is an additive number because the digits can form an additive sequence: 1, 1, 2, 3, 5, 8.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;解题思路：DFS递归即可。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isAdditiveNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 已添加的数字，添加之前必须检查是否可以添加。&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// 刚添加完数字state为0&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// 待添加的数字的累加和&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// 当前递归执行到的位置&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 终止条件&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;range-sum-query-2d---immutable&quot;&gt;303/304 Range Sum Query (2D) - Immutable&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/range-sum-query-immutable/&quot;&gt;Range Sum Query - Immutable&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/range-sum-query-2d-immutable/&quot;&gt;Range Sum Query 2D - Immutable&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这两个题的思路都是一样的，针对不变的区间的查询，用数组保存总和，再用后一段的和减去前一段的和。针对一维数组即 sum[i, j] = sum[0, j] - sum[0, i-1]。需要考虑一些边界条件。2D代码如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NumMatrix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NumMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
                                        &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumRegion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;longest-increasing-subsequence&quot;&gt;300 Longest Increasing Subsequence&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-increasing-subsequence/&quot;&gt;Longest Increasing Subsequence&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.csie.ntnu.edu.tw/~u91029/LongestIncreasingSubsequence.html&quot;&gt;相关链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;给定一个数组，求里面的一个最长的递增子序列（LIS）的长度。解法思路：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;暴力深度优先递归：超时；&lt;/li&gt;
  &lt;li&gt;O(n^2)：使用一个数组lens，lens[i]数组保存以第i个元素结束可以组成的最长子序列的长度是多少。初始化为1。遍历每一个元素nums[i]开始遍历，若其后有元素nums[j]比它大，则把lens[j]增一。最终，lens数组中最大的数即所求。&lt;/li&gt;
  &lt;li&gt;O(NlogL)：N为给定序列长度，L为最LIS长度。代码如下：&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*解法一，深度优先递归，结果超时*/&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*class Solution {&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;public:&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    int lengthOfLIS(vector&amp;lt;int&amp;gt;&amp;amp; nums) {&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        return f(nums, 0, INT_MIN, 0);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    }&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;    int f(vector&amp;lt;int&amp;gt; &amp;amp;nums, int pos, int max_num, int len) {&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        if (pos == nums.size())&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;            return len;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        int result1 = 0, result2 = 0;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        if (nums[pos] &amp;gt; max_num) {&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;            result1 = f(nums, pos+1, nums[pos], len+1);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        }&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        result2 = f(nums, pos+1, max_num, len);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        return max(result1, result2);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;};*/&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*解法二，lens[j]记录0到j的最长LIS长度*/&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*class Solution {&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;public:&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    int lengthOfLIS(vector&amp;lt;int&amp;gt;&amp;amp; nums) {&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        int n = nums.size();&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        if (!n)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;            return 0;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        vector&amp;lt;int&amp;gt; lens(n);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        for (int &amp;amp;len : lens)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;            len = 1;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        for (int i = 0; i &amp;lt; n; i ++)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;            for (int j = i + 1; j &amp;lt; n; j ++)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;                if (nums[j] &amp;gt; nums[i])&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;                    lens[j] = max(lens[j], lens[i]+1);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        int result = 0;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        for (int len : lens)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;            result = max(result, len);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;        return result;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;};*/&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*解法三，採取 Greedy 策略，以 Binary Search 加速，達到 O(NlogL) ， N 是給定序列的長度， L 是 LIS 的長度。&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *首先要明确 result 数组的长度是只增不减的，&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *在替换过程中有可能找到的结果不是一个LIS&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *但是结果的长度一定是最长子序列的长度*/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lengthOfLIS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower_bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/*for (int r : result) {&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;                cout &amp;lt;&amp;lt; r &amp;lt;&amp;lt; &amp;quot; &amp;quot;;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;            }&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;            cout &amp;lt;&amp;lt; endl;*/&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;serialize-and-deserialize-binary-tree&quot;&gt;297 Serialize and Deserialize Binary Tree&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/serialize-and-deserialize-binary-tree/&quot;&gt;Serialize and Deserialize Binary Tree&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;将一个树结构序列化，然后又还原。使用递归思想，定义字符串形式为&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;val(left,right)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其中，val表示节点的值，left以及right依旧也是一个符合上述格式的字符串。&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Definition for a binary tree node.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * struct TreeNode {&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *     int val;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *     TreeNode *left;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *     TreeNode *right;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * };&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Codec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_first_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 寻找分割的逗号&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;midx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lidx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;npos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newnode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lidx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;newnode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lidx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;midx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lidx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;newnode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;midx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;midx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Encodes a tree to a single string.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Decodes your encoded data to tree.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


    &lt;p&gt;&lt;a href=&quot;http://blog.qingye.me/leetcode-note-6/&quot;&gt;leetcode-note-6&lt;/a&gt; was originally published by Qing YE at &lt;a href=&quot;http://blog.qingye.me&quot;&gt;Simple Blog&lt;/a&gt; on December 10, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[leetcode-note-5]]></title>
 <link rel="alternate" type="text/html" href="http://blog.qingye.me/leetcode-note-5/" />
  <id>http://blog.qingye.me/leetcode-note-5</id>
  <published>2015-12-08T23:34:32+08:00</published>
  <updated>2015-12-08T23:34:32+08:00</updated>
  <author>
    <name>Qing YE</name>
    <uri>http://blog.qingye.me</uri>
    <email>youkochan233@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;leetcode的312题以及310题。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;burst-balloons&quot;&gt;312 Burst Balloons&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Given n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst balloon i you will get nums[left] * nums[i] * nums[right] coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent.&lt;br /&gt;
Find the maximum coins you can collect by bursting the balloons wisely.&lt;br /&gt;
Note:&lt;br /&gt;
(1) You may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.&lt;br /&gt;
(2) 0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Example:
Given [3, 1, 5, 8]&lt;br /&gt;
Return 167&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;nums = [3,1,5,8] --&amp;gt; [3,5,8] --&amp;gt;   [3,8]   --&amp;gt;  [8]  --&amp;gt; []&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;解题思路：&lt;/p&gt;

&lt;p&gt;使用动态规划，可以有递推公式 dp[i][j] = max( dp[i][k-1] + nums[i-1] * nums[k] * nums[j+1] + dp[k+1][j] )，其中 k 属于 [i, j]&lt;/p&gt;

&lt;p&gt;这个公式的意义为：令&lt;code&gt;dp[i][j]&lt;/code&gt;表示戳破第i个气球到第j个气球可以获得的最大coins数目，那么在求&lt;code&gt;dp[i][j]&lt;/code&gt;的过程中，有可能连续戳爆[i, j]之间的所有气球并不会获得最优解（这个很明显吧？）因此，我们令中间位置为k，则我们问题变成了求 [i, k-1] 区间的最大值与&lt;code&gt;nums[i-1]&lt;/code&gt; * &lt;code&gt;nums[k]&lt;/code&gt; * &lt;code&gt;nums[j+1]&lt;/code&gt;与 [k+1, j]区间的最大值的和，使得这个和最大的k值就是我们需求的，因此使用一个循环进行k值的遍历。同时，需要注意边界条件，即，k等于i或者j时，相应的&lt;code&gt;dp[i][k-1]&lt;/code&gt;以及&lt;code&gt;dp[k+1][j]&lt;/code&gt;为0。&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxCoins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//cout &amp;lt;&amp;lt; &amp;quot;dp[i][j]:&amp;quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;quot;:&amp;quot; &amp;lt;&amp;lt; j &amp;lt;&amp;lt; endl;&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_MIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_dp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_dp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_dp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;//cout &amp;lt;&amp;lt; left &amp;lt;&amp;lt; &amp;quot;:&amp;quot; &amp;lt;&amp;lt; right &amp;lt;&amp;lt; &amp;quot;:&amp;quot; &amp;lt;&amp;lt; left_dp &amp;lt;&amp;lt; &amp;quot;:&amp;quot; &amp;lt;&amp;lt; right_dp &amp;lt;&amp;lt; endl;&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;//cout &amp;lt;&amp;lt; &amp;quot;m:&amp;quot; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;quot; temp:&amp;quot; &amp;lt;&amp;lt; temp &amp;lt;&amp;lt; endl;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//cout &amp;lt;&amp;lt; &amp;quot;dp[i][j]:&amp;quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;quot;:&amp;quot; &amp;lt;&amp;lt; j &amp;lt;&amp;lt; &amp;quot; is &amp;quot; &amp;lt;&amp;lt; dp[i][j] &amp;lt;&amp;lt; endl;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;minimum-height-trees&quot;&gt;310 Minimum Height Trees&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;For a undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.&lt;br /&gt;
Format&lt;br /&gt;
The graph contains n nodes which are labeled from 0 to n - 1. You will be given the number n and a list of undirected edges (each edge is a pair of labels).&lt;br /&gt;
You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;解题思路：输入是无向图的一些边以及定点数目。找根节点，使得以这个节点为根得到的数是最低的。暴力法即穷举了进行便利求得深度，肯定会超时，就不考虑了。第二种思路是，通过这个题设，我们可以知道，最终得到的顶点数目不是一就是二。为什么呢？假设存在第三个顶点，由于无向图是树，则肯定不会有环；且这三个顶点肯定是邻接的（如果不是邻接的说明肯定有顶点可以把这三个顶点连接在一起，那么取这些顶点得到的树的高度肯定比这三个顶点得到的高度还低），因此，一定能从这三个顶点中取出中间顶点作为最佳顶点，因此最终顶点数目不是一就是二（其实我也不知道这么证对不对，管他呢也没人看）。&lt;/p&gt;

&lt;p&gt;综上诉述，我们知道最后得到的顶点不是一就是二，因此，我们进行若干轮节点的删除，每一次删除删掉那些度为1的节点，知道最后剩下的节点为一个或者两个即可。同时，我们在读取无向图的边时，记录下每一个顶点邻接的所有顶点，从而统计顶点的度。删除顶点时，也要从它邻接的顶点的邻接列表中将这个顶点移除。&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findMinHeightTrees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 首先把graph[i]都初始化一遍，等下就不用针对不同的情况进行判断&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;temp_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 删除node&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 找到这个node邻接node，把这个node从邻接node的链表中删除&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 如果此时邻接node的度变为了1，说明下一次需要删除这个node&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;new_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;temp_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;new_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


    &lt;p&gt;&lt;a href=&quot;http://blog.qingye.me/leetcode-note-5/&quot;&gt;leetcode-note-5&lt;/a&gt; was originally published by Qing YE at &lt;a href=&quot;http://blog.qingye.me&quot;&gt;Simple Blog&lt;/a&gt; on December 08, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[[leetcode] - Super Ugly Number]]></title>
 <link rel="alternate" type="text/html" href="http://blog.qingye.me/leetcode-super-ugly-number/" />
  <id>http://blog.qingye.me/leetcode-super-ugly-number</id>
  <published>2015-12-07T22:41:32+08:00</published>
  <updated>2015-12-07T22:41:32+08:00</updated>
  <author>
    <name>Qing YE</name>
    <uri>http://blog.qingye.me</uri>
    <email>youkochan233@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;holy shit，一晚上想这个题竟然都没想出来，特此记录。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.com/problems/super-ugly-number/&quot;&gt;Super Ugly Number&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Write a program to find the nth super ugly number.&lt;br /&gt;
Super ugly numbers are positive numbers whose all prime factors are in the given prime list primes of size k. For example, [1, 2, 4, 7, 8, 13, 14, 16, 19, 26, 28, 32] is the sequence of the first 12 super ugly numbers given primes = [2, 7, 13, 19] of size 4.&lt;/p&gt;

  &lt;p&gt;Note:&lt;br /&gt;
(1) 1 is a super ugly number for any given primes.&lt;br /&gt;
(2) The given numbers in primes are in ascending order.&lt;br /&gt;
(3) 0 &amp;lt; k ≤ 100, 0 &amp;lt; n ≤ 106, 0 &amp;lt; primes[i] &amp;lt; 1000.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;解题思路如下：&lt;/p&gt;

&lt;p&gt;应该能看出，后面的任意一个数字都是前面的某个数字乘以某个质数因子得出的，比如8是4乘以2，32是16乘以2，26是13乘以2。然而生成下一个数字的过程中，我们应该选取哪一个因子乘以哪一个数字呢？我们使用一个&lt;code&gt;prims.size()&lt;/code&gt;长度的数组&lt;code&gt;index&lt;/code&gt;记录每一个因子在生成下一个ugly_number时需要乘上的数的下标，同时，生成的ugly_number必须是大于前一个ugly_number的，因此在不满足该条件时，一直将下标加一，直到满足条件为止。每次生成新ugly_number时，选择质数因子乘上对应的数字得到的结果中的最小的数。&lt;/p&gt;

&lt;p&gt;代码如下&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nthSuperUglyNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ugly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;min_element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ugly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ugly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ugly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ugly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ugly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


    &lt;p&gt;&lt;a href=&quot;http://blog.qingye.me/leetcode-super-ugly-number/&quot;&gt;[leetcode] - Super Ugly Number&lt;/a&gt; was originally published by Qing YE at &lt;a href=&quot;http://blog.qingye.me&quot;&gt;Simple Blog&lt;/a&gt; on December 07, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[linux学习笔记（三）— 信号量]]></title>
 <link rel="alternate" type="text/html" href="http://blog.qingye.me/linux-note-3/" />
  <id>http://blog.qingye.me/linux-note-3</id>
  <published>2015-12-04T23:56:00+08:00</published>
  <updated>2015-12-04T23:56:00+08:00</updated>
  <author>
    <name>Qing YE</name>
    <uri>http://blog.qingye.me</uri>
    <email>youkochan233@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;于是我准备开始从比较简单的信号量开始看了。看的过程中当然会有很多不理解的，所以还是做一个记录吧，把能理解的或者不能理解的都记下来。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;section&quot;&gt;信号量&lt;/h2&gt;

&lt;p&gt;信号量的头文件为&lt;em&gt;Semaphore.c (linux-2.6.32.68/kernel)&lt;/em&gt;，源文件为&lt;em&gt;Semaphore.h (linux-2.6.32.68/include/linux)&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;头文件中声明了信号量结构体&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* Please don&amp;#39;t access any members of this structure directly */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;spinlock_t&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_head&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;wait_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以及对信号量的初始化操作以及增减操作的一些函数或宏定义。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sema_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_class_key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__SEMAPHORE_INITIALIZER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;lockdep_init_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dep_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;semaphore-&amp;gt;lock&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define init_MUTEX(sem)		sema_init(sem, 1)&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define init_MUTEX_LOCKED(sem)	sema_init(sem, 0)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__must_check&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;down_interruptible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__must_check&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;down_killable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__must_check&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;down_trylock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__must_check&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;down_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jiffies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其中，&lt;code&gt;init_MUTEX&lt;/code&gt;以及&lt;code&gt;init_MUTEX_LOCKED&lt;/code&gt;，分别将信号量初始化为1和0。其中有一个很让人在意的&lt;code&gt;__must_check&lt;/code&gt;关键字，查了一下意思是&lt;em&gt;__must_check函数是指调用函数一定要处理该函数的返回值，否则编译器会给出警告&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;然后具体函数定义都是大同小异，举一个例子&lt;code&gt;down&lt;/code&gt;来进行说明。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;spin_lock_irqsave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;likely&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;__down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;spin_unlock_irqrestore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXPORT_SYMBOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;down&lt;/code&gt;的作用就是获取这个信号量（也就是占用某种资源）。58行处表示如果信号量获取成功，则把信号量的值减一；如果获取不成功，则调用&lt;code&gt;__down&lt;/code&gt;。而&lt;code&gt;__down&lt;/code&gt;最终会调用&lt;code&gt;__down_common&lt;/code&gt;函数，这个函数根据不同的处理状态，把未成功获取信号量的进程插入等待队列末尾。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sched&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__down_common&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
								&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semaphore_waiter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;list_add_tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;waiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;waiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal_pending_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interrupted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timed_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;__set_task_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;spin_unlock_irq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedule_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;spin_lock_irq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;nl&quot;&gt;timed_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;list_del&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ETIME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

 &lt;span class=&quot;nl&quot;&gt;interrupted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;list_del&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EINTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;__down_common&lt;/code&gt;函数接受三个输入参数，分别是信号量结构体指针，代表状态的变量，以及超时时长。&lt;/p&gt;

&lt;p&gt;其中 state 的值可能为 &lt;code&gt;TASK_UNINTERRUPTIBLE&lt;/code&gt;， &lt;code&gt;TASK_INTERRUPTIBLE&lt;/code&gt;， &lt;code&gt;TASK_KILLABLE&lt;/code&gt;， &lt;code&gt;TASK_UNINTERRUPTIBLE&lt;/code&gt;， 分别代表不同情况下的获取信号量操作。&lt;/p&gt;

&lt;p&gt;除了&lt;code&gt;down_timeout&lt;/code&gt;操作外，其余down操作默认的超时时长为&lt;code&gt;MAX_SCHEDULE_TIMEOUT&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;接下来是&lt;code&gt;up&lt;/code&gt;操作。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;spin_lock_irqsave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;likely&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;__up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;spin_unlock_irqrestore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXPORT_SYMBOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;与&lt;code&gt;down&lt;/code&gt;对应的即为&lt;code&gt;up&lt;/code&gt;操作。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noinline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sched&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semaphore_waiter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waiter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_first_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semaphore_waiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;list_del&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;waiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;wake_up_process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;首先查看该信号量的等待列表是否为空，若为空，则把信号量的值加一；否则调用&lt;code&gt;__up&lt;/code&gt;操作，从该信号量的等待列表中找出第一个等待的进程，将其从等待列表中删除，然后将&lt;code&gt;waiter-&amp;gt;up&lt;/code&gt;置为1，从而结束&lt;code&gt;__down_common&lt;/code&gt;中的循环。再调用&lt;code&gt;wake_up_process&lt;/code&gt;方法来唤醒等待中的进程。&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://blog.qingye.me/linux-note-3/&quot;&gt;linux学习笔记（三）— 信号量&lt;/a&gt; was originally published by Qing YE at &lt;a href=&quot;http://blog.qingye.me&quot;&gt;Simple Blog&lt;/a&gt; on December 04, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Ubuntu下apache2添加二级域名]]></title>
 <link rel="alternate" type="text/html" href="http://blog.qingye.me/add-subsite/" />
  <id>http://blog.qingye.me/add-subsite</id>
  <published>2015-12-03T15:14:00+08:00</published>
  <updated>2015-12-03T15:14:00+08:00</updated>
  <author>
    <name>Qing YE</name>
    <uri>http://blog.qingye.me</uri>
    <email>youkochan233@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;最近忽然想到可以给网站加一个二级域名，这样就可以挂一点别的东西在上面了。于是折腾了一下。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;section&quot;&gt;步骤&lt;/h2&gt;

&lt;p&gt;首先去注册域名的网站添加一条A类记录，把所有的&lt;code&gt;*.yoursite.me&lt;/code&gt;这样的请求都解析到服务器的IP上；&lt;/p&gt;

&lt;p&gt;然后再Ubuntu的Apache2目录下新建一个site文件。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/apache2/sites-available
cp 000-default.conf test.yoursite.me.conf
vim test.yoursite.me.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其中&lt;code&gt;000-default.conf&lt;/code&gt;是默认的site文件，相当于一个模板。&lt;code&gt;test.yoursite.me.conf&lt;/code&gt;为新site文件，最好与你需要使用的二级域名一致。（上述步骤可能需要root权限）&lt;/p&gt;

&lt;p&gt;编辑新site文件：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;lt;VirtualHost *:80&amp;gt;
	&lt;span class=&quot;c&quot;&gt;# The ServerName directive sets the request scheme, hostname and port that&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# the server uses to identify itself. This is used when creating&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# redirection URLs. In the context of virtual hosts, the ServerName&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# specifies what hostname must appear in the request&amp;#39;s Host: header to&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# match this virtual host. For the default virtual host (this file) this&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# value is not decisive as it is used as a last resort host regardless.&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# However, you must set it for any further virtual host explicitly.&lt;/span&gt;
	
	ServerName test.yoursite.me
	ServerAdmin webmaster@localhost
	DocumentRoot /your/path/

	&lt;span class=&quot;c&quot;&gt;# Available loglevels: trace8, ..., trace1, debug, info, notice, warn,&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# error, crit, alert, emerg.&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# It is also possible to configure the loglevel for particular&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# modules, e.g.&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;#LogLevel info ssl:warn&lt;/span&gt;

	ErrorLog &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;APACHE_LOG_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/error.log
	CustomLog &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;APACHE_LOG_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/access.log combined

	&lt;span class=&quot;c&quot;&gt;# For most configuration files from conf-available/, which are&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# enabled or disabled at a global level, it is possible to&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# include a line for only one particular virtual host. For example the&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# following line enables the CGI configuration for this host only&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# after it has been globally disabled with &amp;quot;a2disconf&amp;quot;.&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;#Include conf-available/serve-cgi-bin.conf&lt;/span&gt;
&amp;lt;/VirtualHost&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;ServerName&lt;/code&gt;：修改成你需要使用的二级域名
&lt;code&gt;DocumentRoot&lt;/code&gt;：修改成网页文件的路径&lt;/p&gt;

&lt;p&gt;然后保存后，执行：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;a2ensite test.yoursite.me
service apache2 reload&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;完成。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://blog.qingye.me/add-subsite/&quot;&gt;Ubuntu下apache2添加二级域名&lt;/a&gt; was originally published by Qing YE at &lt;a href=&quot;http://blog.qingye.me&quot;&gt;Simple Blog&lt;/a&gt; on December 03, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[linux内核学习笔记（二）]]></title>
 <link rel="alternate" type="text/html" href="http://blog.qingye.me/linux-note-2/" />
  <id>http://blog.qingye.me/linux-note-2</id>
  <published>2015-12-02T14:55:00+08:00</published>
  <updated>2015-12-02T14:55:00+08:00</updated>
  <author>
    <name>Qing YE</name>
    <uri>http://blog.qingye.me</uri>
    <email>youkochan233@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;主要介绍一下Linux源码的一些结构（2.6）&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;进入内核源代码树的根目录并列出它的子目录。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;arch。该目录包含了与体系结构相关的文件。可以在arch/目录下看到针对ARM、Motorola 68K、s390、MIPS、Alpha、SPARC和IA64等处理器的子目录。&lt;/li&gt;
  &lt;li&gt;block。该目录主要包含块存储设备I/O调度算法的实现。&lt;/li&gt;
  &lt;li&gt;crypto。该目录实现了密码操作以及与加密相关的API，它们可被应用于WiFi设备驱动的加密算法等场合。&lt;/li&gt;
  &lt;li&gt;Documentation。该目录包含了内核中各个子系统的简要描述，它是你探究内核方面问题的第一站。&lt;/li&gt;
  &lt;li&gt;drivers。这个目录包含了大量设备类和外设控制器的驱动，包括字符、串口、内置集成电路（I2C）、个人计算机存储卡国际联盟（PCMCIA）、外 围组件互连（PCI）、通用串行总线（USB）、视频、音频、块、集成驱动电子设备（IDE）、小型计算机系统接口（SCSI）、CD-ROM、网络适配 器、异步传输模式（ATM）、蓝牙和内存技术设备（MTD）等。每一类设备对应drivers/下面的一个子目录，譬如PCMCIA驱动程序的源代码位于 drivers/pcmcia/目录，MTD驱动程序位于drivers/mtd/目录。drivers/下的这些子目录是本书的主要议题。&lt;/li&gt;
  &lt;li&gt;fs。这个目录包含了EXT3、EXT4、reiserfs、FAT、VFAT、sysfs、procfs、isofs、JFFS2、XFS、NTFS和NFS等文件系统的实现。&lt;/li&gt;
  &lt;li&gt;include。内核头文件位于此目录。该目录下以asm开头的子目录包含了与体系结构相关的头文件，比如include/asm-x86/子目录包含了x86体系架构的头文件，include/asm-arm/包含了ARM体系架构的头文件。&lt;/li&gt;
  &lt;li&gt;init。这个目录包含了高级别初始化和启动代码。&lt;/li&gt;
  &lt;li&gt;ipc。这个目录包含了对消息队列、信号、共享内存等进程间通信（IPC）机制的支持。&lt;/li&gt;
  &lt;li&gt;kernel。基本内核中与体系架构无关的部分。&lt;/li&gt;
  &lt;li&gt;lib。通用内核对象（kobject）处理程序、循环冗余码校验（CRC）计算函数等库函数例程位于此目录。&lt;/li&gt;
  &lt;li&gt;mm。这个目录包含了内存管理的实现。&lt;/li&gt;
  &lt;li&gt;net。该目录实现了网络协议，包括Internet协议第4版（IPv4）、IPv6、网际互联交换协议（IPX）、蓝牙、ATM、红外、链路访问过程平衡（LAPB）以及逻辑链路控制（LLC）。&lt;/li&gt;
  &lt;li&gt;scripts。内核编译过程中要使用的脚本位于此目录。&lt;/li&gt;
  &lt;li&gt;security。这个目录包含了针对安全的框架。&lt;/li&gt;
  &lt;li&gt;sound。Linux音频子系统位于此目录。&lt;/li&gt;
  &lt;li&gt;usr。此目录包含了initramfs 的实现。&lt;/li&gt;
&lt;/ol&gt;


    &lt;p&gt;&lt;a href=&quot;http://blog.qingye.me/linux-note-2/&quot;&gt;linux内核学习笔记（二）&lt;/a&gt; was originally published by Qing YE at &lt;a href=&quot;http://blog.qingye.me&quot;&gt;Simple Blog&lt;/a&gt; on December 02, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[linux内核学习笔记（一）]]></title>
 <link rel="alternate" type="text/html" href="http://blog.qingye.me/linux-note-1/" />
  <id>http://blog.qingye.me/linux-note-1</id>
  <published>2015-12-02T14:55:00+08:00</published>
  <updated>2015-12-02T14:55:00+08:00</updated>
  <author>
    <name>Qing YE</name>
    <uri>http://blog.qingye.me</uri>
    <email>youkochan233@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;记录一些入门知识点&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;section&quot;&gt;基本概念&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;模块&lt;/h3&gt;

&lt;p&gt;模块是Linux内核的一个特点，在不影响性能的情况下，能够有效地实现许多微内核理论上的优点。模块是一个目标文件，代码可以在运行时链接到内核或从内核中取下。这种目标代码通常由一组函数组成，用来实现一种文件系统、一个驱动程序或者其他内核上层的功能。与微内核操作系统的外层不同，模块不是作为一个特殊的进程执行的。相反，与任何其他静态链接的内核函数一样，它在内核态代表当前进程执行。&lt;/p&gt;

&lt;p&gt;主要优点有下面这些：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;模块化方法：因为可以在运行时链接或者卸载，因此，系统程序设计员必须引入定义明确的软件接口来访问由模块处理的数据结构。&lt;/li&gt;
  &lt;li&gt;平台无关性：即使模块依赖于某些特殊的硬件特点，但是它不依赖于某个固定的硬件平台。&lt;/li&gt;
  &lt;li&gt;节省内存的使用：当需要模块的功能时，把它连接到正在运行的内核中，否则卸载。这种机制对用户是透明的，因为链接和卸载是内核自动完成的。&lt;/li&gt;
  &lt;li&gt;没有性能损失：模块的目标代码一旦被链接到内核，其作用与静态链接的内核代码完全等价。【其实呢，当模块被连接或者被卸载时，性能是稍有影响的，但是呢，在微内核操作系统中，系统进程的创建和删除同样也是这样的】&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;硬连接&lt;/h3&gt;

&lt;p&gt;包含在一个目录中的文件名就是一个文件的硬链接，或者简称链接。&lt;/p&gt;

&lt;p&gt;硬链接有两方的限制：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不允许给目录创建硬链接。因为这可能把目录树变成环形图，从而不能通过名字定位一个文件&lt;/li&gt;
  &lt;li&gt;只有在同一文件系统中的文件之间才能创建链接。现代Unix可能包含了几种文件系统，这些文件系统位于不同的磁盘/分区，用户也许没有注意到他们的物理划分。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;文件描述符与索引节点&lt;/h3&gt;

&lt;p&gt;Unix除了设备文件或者一些特殊的文件以外，每一个文件都由一系列字符组成。这个文件不包含任何控制信息，比如文件长度、文件结束符（EOF）等。&lt;/p&gt;

&lt;p&gt;文件系统中用来管理文件的所有信息包含在索引节点（inode）的数据结构中。每一个文件都有自己的inode。文件系统中用inode识别一个文件。&lt;/p&gt;

&lt;p&gt;inode至少应该包含的最基本属性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;文件类型&lt;/li&gt;
  &lt;li&gt;与文件相关的硬链接个数&lt;/li&gt;
  &lt;li&gt;以字节为单位的文件长度&lt;/li&gt;
  &lt;li&gt;设备标识符（即包含这个文件的设备的标识符）&lt;/li&gt;
  &lt;li&gt;用来在文件系统中标识文件的索引节点号&lt;/li&gt;
  &lt;li&gt;文件拥有着的UID&lt;/li&gt;
  &lt;li&gt;文件的GID&lt;/li&gt;
  &lt;li&gt;几个时间标记，说明inode状态改变的时间、最后访问时间、最后修改时间&lt;/li&gt;
  &lt;li&gt;访问权限和文件模式（mode）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;进程描述符&lt;/h3&gt;

&lt;p&gt;为了让内核管理进程，每一个进程由一个进程描述符来表示。当内核暂停一个进程的执行时，在进程描述符中保存几个处理寄存器的内容。这些寄存器包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;程序计数器（PC）和栈指针（SP）寄存器&lt;/li&gt;
  &lt;li&gt;通用寄存器&lt;/li&gt;
  &lt;li&gt;浮点寄存器&lt;/li&gt;
  &lt;li&gt;包含CPU状态信息的处理器控制寄存器（PSW）&lt;/li&gt;
  &lt;li&gt;用来跟踪进程对RAM访问的内存管理寄存器&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当内核决定恢复一个进程时，它用进程描述符中合适的域来装载CPU的寄存器。从而恢复执行。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;进程地址空间&lt;/h3&gt;

&lt;p&gt;每一个进程都运行在它私有的地址空间，在用户态下运行的进程涉及到私有栈、数据和代码区。挡在内核态运行时，进程访问内核的数据和代码区，但使用另外的栈。&lt;/p&gt;

&lt;p&gt;因为内核是可充入的，所以几个内核控制路径（每一个都与不同的进程相关）可以轮流执行。在这种情况下每一个内核控制路径都有它自己的私有内核态堆栈。&lt;/p&gt;

&lt;p&gt;尽管每一个进程看起来是在访问一个似有地址空间，但有时候进程之间也共享部分地址空间，在一个情况下，进程明确要求这种共享；在另外一些情况下、由内核自动完成共享，以节约内存。&lt;/p&gt;

&lt;p&gt;同一个程序被多个用户使用时，仅仅装入内存一次，指令被所有需求的用户共享。数据不被共享，这都是内核自动完成的以节约内存。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;临界区&lt;/h3&gt;

&lt;p&gt;一般来说，对全局变量的安全访问通过原子操作保证。然而很多操作不可能用单一的操作完成。所以有临界区概念，临界区是这样一段代码，进入这段代码的进程必须完成以后另一个进程才可以进入。&lt;/p&gt;

&lt;p&gt;这些问题不仅出现在内核控制路径中，也出现在共享公共数据的进程之间。以下有几种同步内核控制路径的方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;非抢占式内核：当进程在内核态执行时，不能被任意挂起，也不能被另一个进程替代。因此，在单处理系统上，所有的中断或者异常处理程序不能更新的内核数据结构，内核对他们的访问都是安全的。但是这种非抢占能力在多处理器系统上是低效的，因为运行在不同的CPU上的两个内核控制路径本可以并发地访问相同的数据结构&lt;/li&gt;
  &lt;li&gt;关中断：单处理器系统上的另一种同步机制是在进入一个临界区之前禁止产生所有的硬件中断，在离开临界区时再允许中断。临界区较大时，有可能使得所有的硬件活动处于冻结状态。因此，在多处理系统上，这种机制根本不起作用。&lt;/li&gt;
  &lt;li&gt;信号量：一种广泛使用的机制是信号量（semaphore）。信号量仅仅是与一个数据结构相关的一个计数器，当所有内核线程访问这个数据结构前，都要检查这个信号量。可以把每一个信号量当作一个对象，其组成如下：一个整数变量、一个等待进程的链表、两个原子方法：down() 以及 up()。&lt;/li&gt;
  &lt;li&gt;自旋锁：某些情况下若是更新数据结构所需的时间较短，信号量可能是很低效的。因为需要把进程插入到信号量链表中，然后挂起。这些操作都比较费时，完成这些操作时，其他的内核控制路径可能已经释放了这个信号量。因此有&lt;strong&gt;多处理器系统&lt;/strong&gt;使用了自旋锁（spin lock）机制，用来不断执行一个指令的循环直到锁打开。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-7&quot;&gt;虚拟内存&lt;/h3&gt;

&lt;p&gt;虚拟内存作为一种逻辑层，处于应用程度对内存的申请与硬件内存管理单元之间。虚拟内存有很多用途和优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;几个进程可以并发地执行&lt;/li&gt;
  &lt;li&gt;应用程序所需的内存大于可用物理内存时、也可以运行&lt;/li&gt;
  &lt;li&gt;进程可以执行只有部分代码装入到内存的程序&lt;/li&gt;
  &lt;li&gt;允许每一个进程访问可用物理内存的一个子集&lt;/li&gt;
  &lt;li&gt;进程可以共享库函数或程序的单一的内存映像&lt;/li&gt;
  &lt;li&gt;程序是可重定位的，可以把程序放在物理内存的任何地方&lt;/li&gt;
  &lt;li&gt;编程者可以编写与机器无关的代码，因为它们不必关心有物理内存的组织结构&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;进程使用虚拟地址，内核和MMU协作定位其在内存中的实际物理位置。&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://blog.qingye.me/linux-note-1/&quot;&gt;linux内核学习笔记（一）&lt;/a&gt; was originally published by Qing YE at &lt;a href=&quot;http://blog.qingye.me&quot;&gt;Simple Blog&lt;/a&gt; on December 02, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[通过查询结构控制相关程度]]></title>
 <link rel="alternate" type="text/html" href="http://blog.qingye.me/controlling-relevance/" />
  <id>http://blog.qingye.me/controlling-relevance</id>
  <published>2015-12-01T11:37:03+08:00</published>
  <updated>2015-12-01T11:37:03+08:00</updated>
  <author>
    <name>Qing YE</name>
    <uri>http://blog.qingye.me</uri>
    <email>youkochan233@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;根据上一篇文章，我们可以通过选取不同的模型，或者在创立索引时加入一些提升，或者禁用某些查询因子来实现对查询的控制。这一篇中，会介绍一些通过不同的查询结构来对文档相似度进行控制的方式。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;ES的查询DSL是非常灵活的。你可以通过将单独的查询子句在查询层次中上下移动来让它更重要/更不重要。比如，下面的查询：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;quick OR brown OR red OR fox
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那我们就可以把这个查询写作成一个布尔查询使得对于所有的词条在同一个层次：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;GET /_search
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;should&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;quick&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;brown&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;red&amp;quot;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;fox&amp;quot;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;但是这种查询有可能会对一篇包含&lt;code&gt;quick&lt;/code&gt;、&lt;code&gt;red&lt;/code&gt;以及&lt;code&gt;brown&lt;/code&gt;的文章与另一篇包含&lt;code&gt;quick&lt;/code&gt;、&lt;code&gt;red&lt;/code&gt;以及&lt;code&gt;fox&lt;/code&gt;的文章得出相同的分数。&lt;code&gt;red&lt;/code&gt;以及&lt;code&gt;brown&lt;/code&gt;是近义词于是我们有可能仅仅只需要他们中有一个出现就可以了。或许我们实际上所期望的查询应该是下面这样：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;quick OR (brown OR red) OR fox&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;根据标准布尔逻辑，这一条查询和最初的查询是完全一致的，但是根据组合查询，一个布尔查询并不止关心一个文档是否与自身匹配，还关心这篇文档匹配得有多好。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;GET /_search
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;should&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;quick&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;fox&amp;quot;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;should&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;brown&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;,
              &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;red&amp;quot;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;现在，&lt;code&gt;red&lt;/code&gt;以及&lt;code&gt;brown&lt;/code&gt;在同一层上竞争，&lt;code&gt;quick&lt;/code&gt;、&lt;code&gt;fox&lt;/code&gt;以及&lt;code&gt;red OR brown&lt;/code&gt;为顶层的竞争词条。&lt;/p&gt;

&lt;p&gt;我们之前也讨论过了&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/guide/current/match-query.html&quot;&gt;match&lt;/a&gt;、&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/guide/current/multi-match-query.html&quot;&gt;multi_match&lt;/a&gt;、&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/guide/current/term-vs-full-text.html&quot;&gt;term&lt;/a&gt;、&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/guide/current/bool-query.html&quot;&gt;bool&lt;/a&gt;以及&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/guide/current/_best_fields.html#dis-max-query&quot;&gt;dis_max&lt;/a&gt;这些查询，都可以用来控制相关度得分。剩下的部分介绍三种打分相关的查询：&lt;code&gt;the boosting query&lt;/code&gt; 、 &lt;code&gt;the constant_score query&lt;/code&gt; 以及 &lt;code&gt;the function_score query&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;the-boosting-query&quot;&gt;the boosting query&lt;/h2&gt;

&lt;p&gt;如果你想在互联网上搜索&lt;code&gt;Apple&lt;/code&gt;，那么搜出的结果有可能是公司、水果或者是菜谱。我们有可能会想去缩小搜索出的结果的范围，从而能仅仅搜索出有关公司的结果。于是我们可以通过十一年&lt;code&gt;must_not&lt;/code&gt;子句排除一些词语比如&lt;code&gt;pie&lt;/code&gt;、&lt;code&gt;tart&lt;/code&gt;等。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;GET /_search
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;must&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;match&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;must_not&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;match&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;pie tart fruit crumble tree&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;但是谁能说我们使用这种方式排除一些词条后不会错过一些实际上非常相关的文档呢？某些时候&lt;code&gt;must_not&lt;/code&gt;子句却是太严格了。&lt;/p&gt;

&lt;p&gt;为了解决这种问题，我们可以使用&lt;code&gt;boosting query&lt;/code&gt;。这种查询语句使得我们得到的结果也有可能是关于水果或者是点心，但是我们降低了这些文档的得分，如：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;GET /_search
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;boosting&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;positive&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;match&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;negative&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;match&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;pie tart fruit crumble tree&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;negative_boost&amp;quot;&lt;/span&gt;: 0.5
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;它接受了一个&lt;code&gt;postive&lt;/code&gt;查询以及一个&lt;code&gt;negative&lt;/code&gt;查询，只有匹配&lt;code&gt;positive&lt;/code&gt;查询的文档会被包括到结果列表中，但是也匹配了&lt;code&gt;negative&lt;/code&gt;查询的的文档的原始&lt;code&gt;_score&lt;/code&gt;则会乘上&lt;code&gt;negative_boost&lt;/code&gt;从而使得文档的相关性得分被降低。&lt;/p&gt;

&lt;p&gt;因此，&lt;code&gt;negative_boost&lt;/code&gt;应该是小于1.0的。在这个例子中，包含了消极词条的所有文档的&lt;code&gt;_score&lt;/code&gt;都会被减半。&lt;/p&gt;

&lt;h2 id=&quot;constantscore-query&quot;&gt;constant_score query&lt;/h2&gt;

&lt;p&gt;有些时候我们根本不想考虑TF/IDF。我们考虑的仅仅只是一个特定的词有没有出现在一个字段中。或许我们正在搜索一个度假村，我们想尽可能地找出具有以下特征的房子：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WiFi&lt;/li&gt;
  &lt;li&gt;Garden&lt;/li&gt;
  &lt;li&gt;Pool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;度假村文档有可能是下面这种形式的：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;A delightful four-bedroomed house with ... &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;我们可以使用一个简单地&lt;code&gt;match&lt;/code&gt;查询：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;GET /_search
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;match&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;wifi garden pool&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然而，我们需要的并不是真正的全文搜索。此时TF/IDF只会碍手碍脚。我们不在意wifi是否是一个常见的词条，也不在意它在文档中出现的是否频繁。我们在意的只是它是否出现了。实际上，我们只是想通过卖点来对这些度假酒店进行排序，卖点越多越好。如果拥有一个卖点，那么它的分值就是1，如果没有它的分值就是0。&lt;/p&gt;

&lt;p&gt;因此，我们可以使用&lt;code&gt;constant_score query&lt;/code&gt;。这个查询可以包含一个查询或者一个过滤器，并且对多有满足匹配的文档赋值为1，不考虑TF/IDF。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;GET /_search
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;should&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;constant_score&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;match&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;wifi&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;constant_score&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;match&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;garden&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;constant_score&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;match&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;pool&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;或许不是所有的特点都是同样重要的，有一些可能对于用户来说有更高的价值。假设最重要的特征是&lt;code&gt;pool&lt;/code&gt;，那么我们可以提升这个查询子句使得它计算时占更多比重。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;GET /_search
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;should&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;constant_score&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;match&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;wifi&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;constant_score&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;match&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;garden&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;constant_score&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;boost&amp;quot;&lt;/span&gt;:   &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; 
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;match&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;pool&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;一个匹配&lt;code&gt;pool&lt;/code&gt;的文档会使文档最终得分加二，而其他的查询子句只会使总得分加一。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[tips] The final score for each result is not simply the sum of the scores of all matching clauses. The coordination factor and query normalization factor are still taken into account.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最终得分不会是简单地把这些匹配子句的得分相加。协调因子以及查询归约因子也最终被加入了计算中。&lt;/p&gt;

&lt;p&gt;我们可以优化我们的度假村文档，通过添加一个&lt;code&gt;not_analyzed&lt;/code&gt;的&lt;code&gt;features&lt;/code&gt;字段：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;features&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;wifi&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;pool&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;garden&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;By default, a &lt;code&gt;not_analyzed&lt;/code&gt; field has &lt;code&gt;field-length norms&lt;/code&gt; disabled and has &lt;code&gt;index_options&lt;/code&gt; set to &lt;code&gt;docs&lt;/code&gt;, disabling &lt;code&gt;term frequencies&lt;/code&gt;, but the problem remains: &lt;code&gt;the inverse document frequency&lt;/code&gt; of each term is still taken into account.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;默认地，一个&lt;code&gt;not_analyzed&lt;/code&gt;字段禁用了&lt;code&gt;field-length norms&lt;/code&gt;，并且把&lt;code&gt;index_options&lt;/code&gt;设置为了&lt;code&gt;docs&lt;/code&gt;，禁用了&lt;code&gt;term frequencies&lt;/code&gt;。但是问题在于每一个词条的&lt;code&gt;the inverse document frequency&lt;/code&gt;依然被用于进行了计算。&lt;/p&gt;

&lt;p&gt;我们可以使用之前的方式，通过使用&lt;code&gt;constant_score query&lt;/code&gt;来解决这个问题。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;GET /_search
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;should&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;constant_score&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;match&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;features&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;wifi&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;constant_score&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;match&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;features&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;garden&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;constant_score&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;boost&amp;quot;&lt;/span&gt;:   2
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;match&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;features&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;pool&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;实际上，每个卖点都应该被视为一个过滤器。度假酒店要么有该卖点，要么没有。使用过滤器似乎是更自然的选择。并且如果我们使用了过滤器，还可以得益于过滤器缓存这一功能。&lt;/p&gt;

&lt;p&gt;不使用过滤器的根源在于：过滤器不会计算相关度分值。我们需要的是一座用来连接过滤器和查询的桥梁。而&lt;code&gt;function_score&lt;/code&gt;查询就能够做到这一点，并且它也提供了更多的功能。&lt;/p&gt;

&lt;h2 id=&quot;functionscore-query&quot;&gt;function_score query&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;function_score&lt;/code&gt;查询是处理分值计算过程的终极工具。它让你能够对所有匹配了主查询的每份文档调用一个函数来调整甚至是完全替换原来的&lt;code&gt;_score&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;实际上，你可以通过设置过滤器来将查询得到的结果分成若干个子集，然后对每个子集使用不同的函数。这样你就能够同时得益于：高效的分值计算以及可缓存的过滤器。&lt;/p&gt;

&lt;p&gt;它拥有几种预先定义好了的函数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;weight&lt;/code&gt;：对每份文档适用一个简单的提升，且该提升不会被归约：当weight为2时，结果为&lt;code&gt;2 * _score&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;field_value_factor&lt;/code&gt;：使用文档中某个字段的值来改变&lt;code&gt;_score&lt;/code&gt;，比如将受欢迎程度或者投票数量考虑在内。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;random_score&lt;/code&gt;：使用一致性随机分值计算来对每个用户采用不同的结果排序方式，对相同用户仍然使用相同的排序方式。&lt;/li&gt;
  &lt;li&gt;衰减函数(&lt;code&gt;Decay Function&lt;/code&gt;) - linear，exp，gauss：将像&lt;code&gt;publish_date&lt;/code&gt;，&lt;code&gt;geo_location&lt;/code&gt;或者&lt;code&gt;price&lt;/code&gt;这类浮动值考虑到&lt;code&gt;_score&lt;/code&gt;中，偏好最近发布的文档，邻近于某个地理位置的文档或者价格靠近某一点的文档。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;script_score&lt;/code&gt;：使用自定义的脚本来完全控制分值计算逻辑。如果你需要以上预定义函数之外的功能，可以根据需要通过脚本进行实现。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;没有&lt;code&gt;function_score&lt;/code&gt;查询的话，我们也许就不能将全文搜索得到分值和近因进行结合了。我们将不得不根据&lt;code&gt;_score&lt;/code&gt;或者&lt;code&gt;date&lt;/code&gt;进行排序；无论采用哪一种都会抹去另一种的影响。function_score查询让我们能够将两者融合在一起：仍然通过全文相关度排序，但是给新近发布的文档，或者流行的文档，或者符合用户价格期望的文档额外的权重。&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://blog.qingye.me/controlling-relevance/&quot;&gt;通过查询结构控制相关程度&lt;/a&gt; was originally published by Qing YE at &lt;a href=&quot;http://blog.qingye.me&quot;&gt;Simple Blog&lt;/a&gt; on December 01, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Lucene的实用评分功能]]></title>
 <link rel="alternate" type="text/html" href="http://blog.qingye.me/lucene-psf/" />
  <id>http://blog.qingye.me/lucene-psf</id>
  <published>2015-12-01T10:42:33+08:00</published>
  <updated>2015-12-01T10:42:33+08:00</updated>
  <author>
    <name>Qing YE</name>
    <uri>http://blog.qingye.me</uri>
    <email>youkochan233@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;最近既然毕设是有关这个的我就先看看文档，顺便翻译翻译吧。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;section&quot;&gt;背景介绍&lt;/h2&gt;

&lt;p&gt;对于仅处理结构化数据(比如日期，数值和字符枚举值)的数据库，它们只需要检查一份文档(在关系数据库中是一行)是否匹配查询即可。&lt;/p&gt;

&lt;p&gt;尽管布尔类型的YESNO匹配也是全文搜索的一个必要组成，它们本身是不够的。我们还需要知道每份文档和查询之间的相关程度。全文搜索引擎不仅要找到匹配的文档，还需要根据相关度对它们进行排序。&lt;/p&gt;

&lt;p&gt;全文搜索相关度的公式，或者被称为相似度算法，将多个因素综合起来为每份文档产生一个相关度_score。在本章中，我们来讨论一下其中的一些变化的部分以及如何控制它们。&lt;/p&gt;

&lt;p&gt;当然相关度并不只和全文查询相关；它也许会将结构化数据考虑在内。我们可能在寻找一个拥有某些卖点(空调，海景，免费的WiFi)的度假旅店。那么当某个度假旅店拥有的卖点越多，那么它也就越相关。或者我们希望除全文搜索本身的相关度外，同时将时间的远近，价格，流行度或者距离这类因素也考虑在内。&lt;/p&gt;

&lt;p&gt;以上这些设想都是可以实现的，得益于ES中强大的分值计算功能。&lt;/p&gt;

&lt;p&gt;我们首先会从理论角度来看看Lucene是如何计算相关度的，然后从实际的例子出发来讨论一下如何来控制该过程。&lt;/p&gt;

&lt;p&gt;Lucene（也就是ES）使用了布尔模型（Boolean Model）来寻找匹配的文档，以及一个被称为&lt;code&gt;Prarical Scoring Function&lt;/code&gt;的公式来计算相关度。该公式借用了词条频度/倒排文档频度以及向量空间模型的概念，同时也增加了一些更现代的特性比如Coordination Factor，字段长度归约，以及词条/查询子句提升。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;不要害怕！这些概念并不像它们的名字那般复杂。尽管在这一节中提到了算法，公式以及数学模型，它们的作用也只不过是方便人类理解。理解算法本身并不比理解它们对结果的影响更重要。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;boolean-model&quot;&gt;Boolean Model&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Boolean model simply applies the AND, OR, and NOT conditions expressed in the query to find all the documents that match. A query for full AND text AND search AND (elasticsearch OR lucene) will include only documents that contain all of the terms full, text, and search, and either elasticsearch or lucene.&lt;br /&gt;
This process is simple and fast. It is used to exclude any documents that cannot possibly match the query.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;布尔模型简单地应用查询中的AND，OR以及NOT条件来寻找所有匹配的文档。下面的查询：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;full AND text AND search AND (elasticsearch OR lucene)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;会只包括含有所有full，text，search词条，以及词条elasticsearch或者lucene之一的文档。&lt;/p&gt;

&lt;p&gt;这个过程是简单且迅速的。它用来排除那些不会匹配查询的文档。&lt;/p&gt;

&lt;h2 id=&quot;term-frequencyinverse-document-frequency-tfidf&quot;&gt;Term Frequency/Inverse Document Frequency (TF/IDF)&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Once we have a list of matching documents, they need to be ranked by relevance. Not all documents will contain all the terms, and some terms are more important than others. The relevance score of the whole document depends (in part) on the weight of each query term that appears in that document.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当我们获得一系列的匹配上查询的文档之后，需要对这些文档根据这些文档与查询的相关性进行打分。不是所有的文档都会包含所有的查询词条，并且某一些词条可能比其他的词条更重要一些。因此，文档的整体相关性得分取决于每一个出现在这篇文档中的查询词条的&lt;strong&gt;权重&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;term-frequency&quot;&gt;Term frequency&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;How often does the term appear in this document? The more often, the higher the weight. A field containing five mentions of the same term is more likely to be relevant than a field containing just one mention. The term frequency is calculated as follows:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一个词条出现在某篇文档中的频繁程度是多少呢？出现越频繁，权重越高。一个包含五次对于同一个词条的提及的字段会比一个仅仅提及这个词条一次的字段更佳相关。词条频率按照下列公式进行计算：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;tf(t in d) = √frequency&lt;br /&gt;
The term frequency (tf) for term t in document d is the square root of the number of times the term appears in the document.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;意思就是词条频率就是一个词条t在文档d中出现的次数的平方根。&lt;/p&gt;

&lt;p&gt;如果你根本不关心一个词条在一个字段中出现了多少次，你只是关心这个词条是否出现了，那么你可以通过使用下面这种&lt;code&gt;mapping&lt;/code&gt;禁用词条频率：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;PUT /my_index
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;mappings&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;doc&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;:          &lt;span class=&quot;s2&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;,
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;index_options&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;docs&amp;quot;&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;把某个字段的&lt;code&gt;index_options&lt;/code&gt;设置为&lt;code&gt;docs&lt;/code&gt;将会禁用词条频率以及词条位置（即词条在这段文本中出现的位置）。这么设置之后这个字段将无法统计一个词条出现了多少次，并且将不能使用&lt;em&gt;phrase or proximity queries&lt;/em&gt;。把某个字段设置为&lt;code&gt;not_analyzed&lt;/code&gt;后，将会默认使用这种配置。&lt;/p&gt;

&lt;h3 id=&quot;inverse-document-frequency&quot;&gt;Inverse document frequency&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;How often does the term appear in all documents in the collection? The more often, the lower the weight. Common terms like &lt;code&gt;and&lt;/code&gt; or &lt;code&gt;the&lt;/code&gt; contribute little to relevance, as they appear in most documents, while uncommon terms like &lt;code&gt;elastic&lt;/code&gt; or &lt;code&gt;hippopotamus&lt;/code&gt; help us zoom in on the most interesting documents. The inverse document frequency is calculated as follows:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一个词条出现在所有收集到的文档中的频繁程度是多少呢？出现越频繁，权重则应该越低。一些常用词条比如&lt;code&gt;and&lt;/code&gt;或者&lt;code&gt;the&lt;/code&gt;应该对于相关性得分的贡献很低，因为它们出现在大多数的文档中，然而一些不常见的词条比如&lt;code&gt;elastic&lt;/code&gt;或者&lt;code&gt;hippopotamus&lt;/code&gt;可以帮助我们放大那些有兴趣的文档的特征。因此，倒排索引频度按照下列公式计算：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;idf(t) = 1 + log ( numDocs / (docFreq + 1))&lt;br /&gt;
The inverse document frequency (idf) of term t is the logarithm of the number of documents in the index, divided by the number of documents that contain the term.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;某个词条t的倒排索引频率（idf）是（（该索引中的文档数目）除以（包含词条t的文档数目加一））求对数的结果（底数是多少？e）。&lt;/p&gt;

&lt;h3 id=&quot;field-length-norm&quot;&gt;Field-length norm&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;How long is the field? The shorter the field, the higher the weight. If a term appears in a short field, such as a title field, it is more likely that the content of that field is about the term than if the same term appears in a much bigger body field. The field length norm is calculated as follows:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;字段长度有多长呢？字段长度越短，权重应该越高。如果一个词条出现在一个短字段中，例如一个标题字段，那我们可以认为，这个字段中的文本相对于一个更大的主体字段来说，对于这个词条更相关。字段长度归约按照下列公式进行计算：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;norm(d) = 1 / √numTerms&lt;br /&gt;
The field-length norm (norm) is the inverse square root of the number of terms in the field.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;字段长度归约是这个字段中的词条数目的平方根的倒数。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;While the field-length norm is important for full-text search, many other fields don’t need norms. Norms consume approximately 1 byte per string field per document in the index, whether or not a document contains the field. Exact-value not_analyzed string fields have norms disabled by default, but you can use the field mapping to disable norms on analyzed fields as well:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;尽管字段长度归约对于全文搜索是很重要的，然而依然有一些字段不需要进行规约。归约对于每一个索引下的每一篇文档中的每一个字符串字段大约消耗一个字节，而不管这个文档是否包含这个字段。使用&lt;code&gt;not_analyzed&lt;/code&gt;也默认地禁用了归约，不过你也可以使用&lt;code&gt;mapping&lt;/code&gt;来禁用某个&lt;code&gt;analyzed&lt;/code&gt;字段的归约操作。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;PUT /my_index
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;mappings&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;doc&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;,
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;norms&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;This field will not take the field-length norm into account. A long field and a short field will be scored as if they were the same length.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这样进行mapping操作之后呢，这个字段将不会计算字段长度归约。一个长字段和一个短字段打分时会被认为是同样长度。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For use cases such as logging, norms are not useful. All you care about is whether a field contains a particular error code or a particular browser identifier. The length of the field does not affect the outcome. Disabling norms can save a significant amount of memory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于用例中的一些，比如日志记录，归约并不是有用的。你所关注的仅仅是一个字段是否包含特定的错误码或者特定的浏览器标识符。字段的长度并不会影响这个输出。禁用归约可以节约大量内存。&lt;/p&gt;

&lt;h3 id=&quot;putting-it-together&quot;&gt;Putting it together&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;These three factors—term frequency, inverse document frequency, and field-length norm—are calculated and stored at index time. Together, they are used to calculate the weight of a single term in a particular document.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这三个影响因素，词条频率，倒排索引频率，字段长度归约，在索引时就被计算以及储存。他们被一起用于一个单个的词条在一个特定文档中的权重。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[tips] When we refer to documents in the preceding formulae, we are actually talking about a field within a document. Each field has its own inverted index and thus, for TF/IDF purposes, the value of the field is the value of the document.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;「这段很关键」: 当我们在上述公式中提及文档（&lt;em&gt;documents&lt;/em&gt;）时，我们实际在说的是文档中的一个字段（&lt;em&gt;field&lt;/em&gt;）。每一个字段都会有它自己倒排索引因此，对于TF/IDF假设，这个字段的值即为这个文档的值。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When we run a simple term query with explain set to true (&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/guide/current/relevance-intro.html#explain&quot;&gt;see Understanding the Score&lt;/a&gt;), you will see that the only factors involved in calculating the score are the ones explained in the preceding sections:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当我们使用&lt;code&gt;explain&lt;/code&gt;来进行一个简单地词条查询时，你将会看到计算得分中相关因素的影响。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;PUT /my_index/doc/1
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&amp;quot;quick brown fox&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

POST /my_index/doc/_search?explain
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;fox&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;下面是查询返回的&lt;code&gt;explanation&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;weight(text:fox in 0) [PerFieldSimilarity]&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;0.15342641   (1)&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;result of&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;fieldWeight in 0                         0.15342641&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;product of&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;l-Scalar-Plain&quot;&gt;tf(freq=1.0), with freq of 1&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;l-Scalar-Plain&quot;&gt;1.0          (2)&lt;/span&gt;
        &lt;span class=&quot;l-Scalar-Plain&quot;&gt;idf(docFreq=1, maxDocs=1)&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;           &lt;span class=&quot;l-Scalar-Plain&quot;&gt;0.30685282   (3)&lt;/span&gt;
        &lt;span class=&quot;l-Scalar-Plain&quot;&gt;fieldNorm(doc=0)&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;                    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;0.5          (4)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;下面来解释一下这些参数的具体意义：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;词条&lt;code&gt;fox&lt;/code&gt;在Lucene内部文档ID为0的文档中的&lt;code&gt;text&lt;/code&gt;字段的最终&lt;code&gt;score&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;词条&lt;code&gt;fox&lt;/code&gt;在&lt;code&gt;text&lt;/code&gt;字段就出现了一次&lt;/li&gt;
  &lt;li&gt;词条&lt;code&gt;fox&lt;/code&gt;在所有文档的&lt;code&gt;text&lt;/code&gt;字段的倒排索引频率（1+ln(1/2)）&lt;/li&gt;
  &lt;li&gt;这个字段的字段长度归约因子。（为何是0.5？）&lt;/li&gt;
  &lt;li&gt;（备注：为何我执行以上代码没有这个结果呢？妈蛋原来官方文档错了）&lt;/li&gt;
  &lt;li&gt;（备注：实际计算字段长度归约因子时字段长度加了1，这个官网文档没写）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通过上面这堆东西，我们知道了一个关键词的得分，当然，一个查询通常由不止一个词条组成，因此，我们需要一个方式来组合多词条的权重。为此，我们介绍向量空间模型（&lt;em&gt;vector space model&lt;/em&gt;）&lt;/p&gt;

&lt;h2 id=&quot;vector-space-model&quot;&gt;vector space model&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;The vector space model provides a way of comparing a multiterm query against a document. The output is a single score that represents how well the document matches the query. In order to do this, the model represents both the document and the query as vectors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;向量空间模型提供了一种针对一篇文档的组合多词条查询结果的方式。向量空间模型输出是一个单个的得分，代表了这篇文档与这个查询的匹配程度。为了完成这个目标，这个模型把文档以及查询都表现为向量的形式。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A vector is really just a one-dimensional array containing numbers, for example:&lt;br /&gt;
[1,2,5,22,3,8]&lt;br /&gt;
In the vector space model, each number in the vector is the weight of a term, as calculated with term frequency/inverse document frequency.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在向量空间模型中，向量种的每一个数字表示某一个词条的权重（&lt;em&gt;weight&lt;/em&gt;），就是上面介绍的词条频率/反向索引频率中计算出的结果。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[tips] While TF/IDF is the default way of calculating term weights for the vector space model, it is not the only way. Other models like Okapi-BM25 exist and are available in Elasticsearch. TF/IDF is the default because it is a simple, efficient algorithm that produces high-quality search results and has stood the test of time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;尽管TF/IDF是向量空间模型中默认的计算词条权重的方式，也不仅仅有这种方式。其他的模型比如Okapi-BM25在elasticsearch中也是可以直接使用的。TF/IDF之所以是默认的，是因为它是一个简单高效的算法，可以提供高质量的搜索结果并且已经经过了时间测试的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Imagine that we have a query for “happy hippopotamus.” A common word like happy will have a low weight, while an uncommon term like hippopotamus will have a high weight. Let’s assume that happy has a weight of 2 and hippopotamus has a weight of 5. We can plot this simple two-dimensional vector—[2,5]—as a line on a graph starting at point (0,0) and ending at point (2,5), as shown in Figure 27, “A two-dimensional query vector for “happy hippopotamus” represented”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;假设我们有一个针对“happy hippopotamus”的查询，一个常用的词条比如&lt;code&gt;happy&lt;/code&gt;将会有一个比较低的权值，然而一个不常见的词条比如&lt;code&gt;hippopotamus&lt;/code&gt;将会有一个比较高的权值。让我们假设&lt;code&gt;happy&lt;/code&gt;权重为2、&lt;code&gt;hippopotamus&lt;/code&gt;权重为5。那么，我们能够绘制出这个二维向量在一个图中，这个向量从（0，0）出发，终止于（2，5），正如下图所示。&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/blog/elas_17in01.png&quot;&gt;
		&lt;img src=&quot;/images/blog/elas_17in01.png&quot; alt=&quot;&quot; /&gt;
	&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;接下来，我们来看这三篇文档：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I am &lt;em&gt;happy&lt;/em&gt; in summer.&lt;/li&gt;
  &lt;li&gt;After Christmas I’m a &lt;em&gt;hippopotamus&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;happy&lt;/em&gt; &lt;em&gt;hippopotamus&lt;/em&gt; helped Harry.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;We can create a similar vector for each document, consisting of the weight of each query term—happy and hippopotamus—that appears in the document, and plot these vectors on the same graph, as shown in Figure 28, “Query and document vectors for “happy hippopotamus””:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们可以为每一篇文档构造一个相似向量，由每一个在这篇文档中出现过的查询词条的权重组成，在同一个图中绘制出这些向量，如下图所示。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Document 1: (happy,             ) — [2,0]&lt;/li&gt;
  &lt;li&gt;Document 2: (     , hippopotamus) — [0,5]&lt;/li&gt;
  &lt;li&gt;Document 3: (happy, hippopotamus) — [2,5]&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/blog/elas_17in01.png&quot;&gt;
		&lt;img src=&quot;/images/blog/elas_17in02.png&quot; alt=&quot;&quot; /&gt;
	&lt;/a&gt;
&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;The nice thing about vectors is that they can be compared. By measuring the angle between the query vector and the document vector, it is possible to assign a relevance score to each document. The angle between document 1 and the query is large, so it is of low relevance. Document 2 is closer to the query, meaning that it is reasonably relevant, and document 3 is a perfect match.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;使用向量的好处在于向量可以进行比较。我们可以通过测量查询向量与文档向量之间的夹角来给每一篇文档确定一个相关性得分。文档1与查询向量之间的夹角过大，因此它的相关性应该比较低。文档2比较接近查询向量，意味着它有一定相关性，文档3则是一个完美的匹配。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[tips] In practice, only two-dimensional vectors (queries with two terms) can be plotted easily on a graph. Fortunately, linear algebra—the branch of mathematics that deals with vectors—provides tools to compare the angle between multidimensional vectors, which means that we can apply the same principles explained above to queries that consist of many terms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;实际上，只有二维向量(使用两个词条的查询)才能够被简单地表示在坐标中。幸运的是，线性代数 - 数学的一个分支，能够处理向量 - 提供了用来比较多维向量间角度的工具，这意味着我们能够使用上述原理对包含很多词条的查询进行处理。&lt;/p&gt;

&lt;p&gt;讨论了向量空间模型，接下来就是看看Lucene实际是如何进行分值计算的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For multiterm queries, Lucene takes the Boolean model, TF/IDF, and the vector space model and combines them in a single efficient package that collects matching documents and scores them as it goes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于多词条的查询，Lucene使用了布尔模型，TF/IDF模型，以及向量空间模型，并且把它们结合到了一个高效的包中，使得可以一边收集匹配上的文档一边给这些文档打分。&lt;/p&gt;

&lt;p&gt;一个多词条查询如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;GET /my_index/doc/_search
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;match&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;quick fox&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;会被重写为：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;GET /my_index/doc/_search
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;should&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;quick&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;fox&amp;quot;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;The bool query implements the Boolean model and, in this example, will include only documents that contain either the term quick or the term fox or both.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;bool&lt;/code&gt;查询实现了布尔模型，在本例中，只会包括含有词条quick或者词条fox的文档。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As soon as a document matches a query, Lucene calculates its score for that query, combining the scores of each matching term. The formula used for scoring is called the practical scoring function. It looks intimidating, but don’t be put off — most of the components you already know. It introduces a few new elements that we discuss next.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当某篇文档匹配一个查询的时候，Lucene同时就会根据这篇文档匹配的所有词条的得分，来计算这篇文档对于这整个查询的得分。这个被用于计算得分的公式被叫做&lt;em&gt;practical scoring function&lt;/em&gt;。这个公式看起来挺可怕的，但是也别退怯，大多数公式中的组件其实都已经知道是什么意思了。下面会介绍这个公式引入的新元素。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;score(q,d)  =                   (1)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;            queryNorm(q)        (2)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;          · coord(q,d)          (3)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;          · ∑ (                 (4)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;                tf(t in d)      (5)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;              · idf(t)²         (6)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;              · t.getBoost()    (7)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;              · norm(t,d)       (8)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;            ) (t in q)          (9)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;下面来一点点解释：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;score(q,d)&lt;/code&gt;: 表示文档d对于查询q的&lt;strong&gt;相关性得分&lt;/strong&gt;（&lt;em&gt;relevance score&lt;/em&gt;），也就是我们得到的最终得分&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;queryNorm(q)&lt;/code&gt;: 表示&lt;strong&gt;查询归约因子&lt;/strong&gt;（&lt;em&gt;query normalization factor&lt;/em&gt;）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;coord(q,d)&lt;/code&gt;: 表示文档d与查询q的&lt;strong&gt;协调因子&lt;/strong&gt;（&lt;em&gt;coordination factor&lt;/em&gt;）&lt;/li&gt;
  &lt;li&gt;(4)-&amp;gt;(9): 表示求和，对于查询q中的每一个词条t&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tf(t in d)&lt;/code&gt;: 表示词条t在文档d中的&lt;strong&gt;词条频率&lt;/strong&gt;（&lt;em&gt;term frequency&lt;/em&gt;）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;idf(t)&lt;/code&gt;: 表示词条t的&lt;strong&gt;倒排索引频率&lt;/strong&gt;（&lt;em&gt;inverse document frequency&lt;/em&gt;）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;t.getBoost()&lt;/code&gt;: 表示适用于查询的&lt;strong&gt;提升&lt;/strong&gt;（&lt;em&gt;boost&lt;/em&gt;）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;norm(t,d)&lt;/code&gt;: 表示&lt;strong&gt;字段长度归约&lt;/strong&gt;（&lt;em&gt;field-length norm&lt;/em&gt;），有可能结合了&lt;strong&gt;索引期间的字段提升&lt;/strong&gt;（&lt;em&gt;index-time field-level boost&lt;/em&gt;）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上述有一些已经知道定义了，现在介绍一些新的内容：&lt;/p&gt;

&lt;h3 id=&quot;query-normalization-factor&quot;&gt;Query Normalization Factor&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;The query normalization factor (queryNorm) is an attempt to normalize a query so that the results from one query may be compared with the results of anothe&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;查询归约因子用于归约一个查询，因此这个查询的结果可以与另外的查询的结果进行比较。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[tips] Even though the intent of the query norm is to make results from different queries comparable, it doesn’t work very well. The only purpose of the relevance _score is to sort the results of the current query in the correct order. You should not try to compare the relevance scores from different queries.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;尽管查询归约因子的意图是确保不同的查询的结果之间可以进行比较，但是它也并没有完全工作得很好。相关度&lt;code&gt;_score&lt;/code&gt;的唯一目的是将当前查询的结果以正确的顺序被排序。你不应该尝试去比较不同查询得到的相关度分值。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This factor is calculated at the beginning of the query. The actual calculation depends on the queries involved, but a typical implementation is as follows:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个因子在查询的开始时被计算。实际的计算取决于查询本身，但是一个典型的实现如下所示：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;queryNorm = 1 / √sumOfSquaredWeights&lt;br /&gt;
The sumOfSquaredWeights is calculated by adding together the IDF of each term in the query, squared.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;sumOfSquaredWeights通过对查询中每个词条的IDF进行累加，然后取其平方根得到的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[tips] The same query normalization factor is applied to every document, and you have no way of changing it. For all intents and purposes, it can be ignored.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;相同的查询归约因子会被适用在每份文档上，你也没有办法改变它。总而言之，它是可以被忽略的。&lt;/p&gt;

&lt;h3 id=&quot;query-coordination&quot;&gt;Query Coordination&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;The coordination factor (coord) is used to reward documents that contain a higher percentage of the query terms. The more query terms that appear in the document, the greater the chances that the document is a good match for the query.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;协调因子被用来奖励那些包含了更多查询词条的文档。文档中出现了越多的查询词条，那么该文档就越可能是该查询的一个高质量匹配。&lt;/p&gt;

&lt;p&gt;假设我们有一个对于&lt;code&gt;quick brown fox&lt;/code&gt;的查询，并且每一个词条的权重都是1.5。没有协调因子时，每一篇文档的得分将会是文档中包含的词条的权重之和。举个例子就是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Document with &lt;code&gt;fox&lt;/code&gt; → score: 1.5&lt;/li&gt;
  &lt;li&gt;Document with &lt;code&gt;quick fox&lt;/code&gt; → score: 3.0&lt;/li&gt;
  &lt;li&gt;Document with &lt;code&gt;quick brown fox&lt;/code&gt; → score: 4.5&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The coordination factor multiplies the score by the number of matching terms in the document, and divides it by the total number of terms in the query. With the coordination factor, the scores would be as follows:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;而协调因子会将得分乘以文档中匹配的词条数目，然后除以查询中的总词条数。通过使用查询归约因子，最终的文档得分如下所示：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Document with &lt;code&gt;fox&lt;/code&gt; → score: 1.5 * 1 / 3 = 0.5&lt;/li&gt;
  &lt;li&gt;Document with &lt;code&gt;quick fox&lt;/code&gt; → score: 3.0 * 2 / 3 = 2.0&lt;/li&gt;
  &lt;li&gt;Document with &lt;code&gt;quick brown fox&lt;/code&gt; → score: 4.5 * 3 / 3 = 4.5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;协调因子使得包含了所有的三个词条的文档比其他的两个文档变得与这个查询更佳相关。&lt;/p&gt;

&lt;p&gt;记得一个对于&lt;code&gt;quick brown fox&lt;/code&gt;的查询将会被重写为一个布尔查询：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;GET /_search
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;should&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;quick&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;brown&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;fox&amp;quot;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;布尔查询默认地为所有&lt;code&gt;should&lt;/code&gt;查询子句使用了协调因子，但是它也允许你禁用协调因子。为什么你会想禁用它呢？好吧，通常情况下，答案是你不想禁用它。协调因子通常都起了一个积极作用。当你使用布尔查询来将多个像&lt;code&gt;match&lt;/code&gt;这样的高级查询(High-level Query)包装在一起时，启用协调因子也是有意义的。匹配的查询子句越多，你的搜索请求和返回的文档之间的匹配程度就越高。&lt;/p&gt;

&lt;p&gt;然而，在一些高级场合下，禁用协调因子也是有意义的。假设你正在查找同义词（synonyms）比如&lt;code&gt;jump&lt;/code&gt;，&lt;code&gt;leap&lt;/code&gt;以及&lt;code&gt;hop&lt;/code&gt;，你不需要关心这个同义词出现了多少次，因为它们都表示了相同的概念。事实上，可能只有其中的一个会出现。此时，禁用协调因子是一个不错的选择：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;GET /_search
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;disable_coord&amp;quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;should&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;jump&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;hop&amp;quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;leap&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;When you use synonyms (see &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/guide/current/synonyms.html&quot;&gt;Synonyms&lt;/a&gt;), this is exactly what happens internally: the rewritten query disables coordination for the synonyms. Most use cases for disabling coordination are handled automatically; you don’t need to worry about it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当你使用&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/guide/current/synonyms.html&quot;&gt;同义词&lt;/a&gt;的时候，这正是在内部发生的：重写的查询会为同义词禁用协调因子。多数禁用协调因子的用例都会被自动地处理；你根本无需担心它。&lt;/p&gt;

&lt;h3 id=&quot;index-time-field-level-boosting&quot;&gt;Index-Time Field-Level Boosting&lt;/h3&gt;

&lt;p&gt;接下来我们讨论一下&lt;strong&gt;提升&lt;/strong&gt;（&lt;em&gt;boosting&lt;/em&gt;）一个字段，即使得一个字段比其他字段更重要，在一个&lt;strong&gt;查询时的提升&lt;/strong&gt;（&lt;em&gt;Query-Time Boosting&lt;/em&gt;）中。当然，在建立索引时，也可以运用提升。事实上，提升是适用于字段中的每一个词条，而不是这一个字段它本身。&lt;/p&gt;

&lt;p&gt;为了在尽可能少占用空间的前提下，将提升值存储到索引中，索引期间字段级别提升会和字段长度归约一起以一个字节被保存在索引中。它是之前公式中norm(t,d)返回的值。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[warning] We strongly recommend against using field-level index-time boosts for a few reasons:
* Combining the boost with the field-length norm and storing it in a single byte means that the field-length norm loses precision. The result is that Elasticsearch is unable to distinguish between a field containing three words and a field containing five words.
* To change an index-time boost, you have to reindex all your documents. A query-time boost, on the other hand, can be changed with every query.
* If a field with an index-time boost has multiple values, the boost is multiplied by itself for every value, dramatically increasing the weight for that field.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;警告！我们强烈不推荐使用索引期间的字段提升，理由如下：
* 将此提升和字段长度归约存储在一个字节中意味着字段长度归约会损失精度。结果是ES不能区分一个含有三个单词的字段和一个含有五个单词的字段。
* 为了修改索引期间提升，你不得不对所有文档重索引。而查询期间的提升则可以因查询而异。
* 如果一个使用了索引期间提升的字段是多值字段（&lt;em&gt;Multivalue Field&lt;/em&gt;），那么提升值会为每一个值进行乘法操作，导致该字段的权重飙升。&lt;/p&gt;

&lt;p&gt;查询时的提升则是一种更简单更干净以及更灵活的选择。&lt;/p&gt;

&lt;h3 id=&quot;query-time-boosting&quot;&gt;Query-Time Boosting&lt;/h3&gt;

&lt;p&gt;在调整查询子句优先级（&lt;em&gt;Prioritizing Clauses&lt;/em&gt;）一节中，我们已经介绍过如何在搜索期间使用&lt;code&gt;boost&lt;/code&gt;参数为一个查询子句增加权重。比如：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;GET /_search
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;should&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;match&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;quick brown fox&amp;quot;&lt;/span&gt;,
              &lt;span class=&quot;s2&quot;&gt;&amp;quot;boost&amp;quot;&lt;/span&gt;: &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;match&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;quick brown fox&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;可知&lt;code&gt;title&lt;/code&gt;字段的查询子句是&lt;code&gt;content&lt;/code&gt;字段查询子句的重要性的两倍，因为它被一个系数2提升了。&lt;/li&gt;
  &lt;li&gt;一个不包含&lt;code&gt;boost&lt;/code&gt;值的查询子句将会有一个中性的提升值1。&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Query-time boosting is the main tool that you can use to tune relevance. Any type of query accepts a boost parameter. Setting a boost of 2 doesn’t simply double the final _score; the actual boost value that is applied goes through normalization and some internal optimization. However, it does imply that a clause with a boost of 2 is twice as important as a clause with a boost of 1.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;查询期间的提升是你可以用来调整相关性的一个主要工具。任何的查询类型都可以接受一个&lt;code&gt;boost&lt;/code&gt;参数，但把一个查询的&lt;code&gt;boost&lt;/code&gt;参数设置为2并不会简单地把最终的&lt;code&gt;_score&lt;/code&gt;加倍。实际的提升值将会经过归约以及一些其他的内部操作。然而它确实意味着包含一个2的提升的查询子句的重要性是一个包含1的提升的子句的重要性的两倍。&lt;/p&gt;

&lt;p&gt;实际上，没有任何公式能够决定对某个特定的查询子句，”正确的”提升值应该是多少。它是通过尝试来得到的。记住&lt;code&gt;boost&lt;/code&gt;仅仅是相关度分值中的一个因素；它需要和其它因素竞争。比如在上面的例子中，title字段相对于content字段，大概已经有一个”自然的”提升了，该提升来自字段长度归约(&lt;em&gt;Field-length Norm&lt;/em&gt;)(因为标题通常会比相关内容要短一些)，因此不要因为你认为某个字段应该被提升而盲目地对它进行提升。适用一个提升值然后检查得到的结果，再进行修正。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;提升一个索引&lt;/h4&gt;

&lt;p&gt;当跨索引进行搜索时，你可以通过&lt;code&gt;indices_boost&lt;/code&gt;参数提升整个索引，如下面的例子所示，给近期的索引中的文档一个更高的权重。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;GET /docs_2014_*/_search 
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;indices_boost&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;docs_2014_10&amp;quot;&lt;/span&gt;: 3,
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;docs_2014_09&amp;quot;&lt;/span&gt;: 2
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;match&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;quick brown fox&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;tgetboost&quot;&gt;t.getBoost()&lt;/h4&gt;

&lt;p&gt;这些提升值在&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/guide/current/practical-scoring-function.html&quot;&gt;Lucene’s Practical Scoring Function&lt;/a&gt;中用&lt;code&gt;t.getBoost()&lt;/code&gt;来表示。提升并不是其在查询DSL出现的地方被适用的。相反，任何的提升值都会被合并然后传递到每个词条上。&lt;code&gt;t.getBoost()&lt;/code&gt;方法返回的是适用于词条本身上的提升值，或者是适用于上层查询的提升值。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[tips] In fact, reading the explain output is a little more complex than that. You won’t see the boost value or t.getBoost() mentioned in the explanatio
n at all. Instead, the boost is rolled into the queryNorm that is applied to a particular term. Although we said that the queryNorm is the same for every term, you will see that the queryNorm for a boosted term is higher than the queryNorm for an unboosted term.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;实际上，阅读&lt;code&gt;explain&lt;/code&gt;的输出本身比上述的说明更复杂。你在解释中根本看不到&lt;code&gt;boost&lt;/code&gt;值或者&lt;code&gt;t.getBoost()&lt;/code&gt;。提升被融合到了适用于特定词条上的&lt;code&gt;queryNorm&lt;/code&gt;中。尽管我们说过&lt;code&gt;queryNorm&lt;/code&gt;对任何词条都是相同的，但是对于提升过的词条而言，&lt;code&gt;queryNorm&lt;/code&gt;会更高一些。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;相关链接：
* &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/guide/current/practical-scoring-function.html&quot;&gt;practical-scoring-function&lt;/a&gt;&lt;br /&gt;
* &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/guide/current/scoring-theory.html&quot;&gt;scoring-theory&lt;/a&gt;&lt;br /&gt;
* &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/guide/current/query-time-boosting.html&quot;&gt;Query-time boosting&lt;/a&gt;&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://blog.qingye.me/lucene-psf/&quot;&gt;Lucene的实用评分功能&lt;/a&gt; was originally published by Qing YE at &lt;a href=&quot;http://blog.qingye.me&quot;&gt;Simple Blog&lt;/a&gt; on December 01, 2015.&lt;/p&gt;
  </content>
</entry>

</feed>
